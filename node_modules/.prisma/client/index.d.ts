
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Session
 * 
 */
export type Session = $Result.DefaultSelection<Prisma.$SessionPayload>
/**
 * Model Viagem
 * 
 */
export type Viagem = $Result.DefaultSelection<Prisma.$ViagemPayload>
/**
 * Model ResetToken
 * 
 */
export type ResetToken = $Result.DefaultSelection<Prisma.$ResetTokenPayload>
/**
 * Model Taca
 * 
 */
export type Taca = $Result.DefaultSelection<Prisma.$TacaPayload>
/**
 * Model Medalha
 * 
 */
export type Medalha = $Result.DefaultSelection<Prisma.$MedalhaPayload>
/**
 * Model Trofeu
 * 
 */
export type Trofeu = $Result.DefaultSelection<Prisma.$TrofeuPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Role: {
  ADMIN: 'ADMIN',
  MANAGER: 'MANAGER',
  DRIVER: 'DRIVER',
  EXPULSO: 'EXPULSO'
};

export type Role = (typeof Role)[keyof typeof Role]


export const Game: {
  ETS2: 'ETS2',
  ATS: 'ATS'
};

export type Game = (typeof Game)[keyof typeof Game]

}

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

export type Game = $Enums.Game

export const Game: typeof $Enums.Game

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.viagem`: Exposes CRUD operations for the **Viagem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Viagems
    * const viagems = await prisma.viagem.findMany()
    * ```
    */
  get viagem(): Prisma.ViagemDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.resetToken`: Exposes CRUD operations for the **ResetToken** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ResetTokens
    * const resetTokens = await prisma.resetToken.findMany()
    * ```
    */
  get resetToken(): Prisma.ResetTokenDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.taca`: Exposes CRUD operations for the **Taca** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tacas
    * const tacas = await prisma.taca.findMany()
    * ```
    */
  get taca(): Prisma.TacaDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.medalha`: Exposes CRUD operations for the **Medalha** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Medalhas
    * const medalhas = await prisma.medalha.findMany()
    * ```
    */
  get medalha(): Prisma.MedalhaDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.trofeu`: Exposes CRUD operations for the **Trofeu** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Trofeus
    * const trofeus = await prisma.trofeu.findMany()
    * ```
    */
  get trofeu(): Prisma.TrofeuDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.13.0
   * Query Engine version: 361e86d0ea4987e9f53a565309b3eed797a6bcbd
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Session: 'Session',
    Viagem: 'Viagem',
    ResetToken: 'ResetToken',
    Taca: 'Taca',
    Medalha: 'Medalha',
    Trofeu: 'Trofeu'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "session" | "viagem" | "resetToken" | "taca" | "medalha" | "trofeu"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Session: {
        payload: Prisma.$SessionPayload<ExtArgs>
        fields: Prisma.SessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findFirst: {
            args: Prisma.SessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findMany: {
            args: Prisma.SessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          create: {
            args: Prisma.SessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          createMany: {
            args: Prisma.SessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          delete: {
            args: Prisma.SessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          update: {
            args: Prisma.SessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          deleteMany: {
            args: Prisma.SessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SessionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          upsert: {
            args: Prisma.SessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          aggregate: {
            args: Prisma.SessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSession>
          }
          groupBy: {
            args: Prisma.SessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SessionCountArgs<ExtArgs>
            result: $Utils.Optional<SessionCountAggregateOutputType> | number
          }
        }
      }
      Viagem: {
        payload: Prisma.$ViagemPayload<ExtArgs>
        fields: Prisma.ViagemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ViagemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ViagemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ViagemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ViagemPayload>
          }
          findFirst: {
            args: Prisma.ViagemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ViagemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ViagemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ViagemPayload>
          }
          findMany: {
            args: Prisma.ViagemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ViagemPayload>[]
          }
          create: {
            args: Prisma.ViagemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ViagemPayload>
          }
          createMany: {
            args: Prisma.ViagemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ViagemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ViagemPayload>[]
          }
          delete: {
            args: Prisma.ViagemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ViagemPayload>
          }
          update: {
            args: Prisma.ViagemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ViagemPayload>
          }
          deleteMany: {
            args: Prisma.ViagemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ViagemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ViagemUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ViagemPayload>[]
          }
          upsert: {
            args: Prisma.ViagemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ViagemPayload>
          }
          aggregate: {
            args: Prisma.ViagemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateViagem>
          }
          groupBy: {
            args: Prisma.ViagemGroupByArgs<ExtArgs>
            result: $Utils.Optional<ViagemGroupByOutputType>[]
          }
          count: {
            args: Prisma.ViagemCountArgs<ExtArgs>
            result: $Utils.Optional<ViagemCountAggregateOutputType> | number
          }
        }
      }
      ResetToken: {
        payload: Prisma.$ResetTokenPayload<ExtArgs>
        fields: Prisma.ResetTokenFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ResetTokenFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResetTokenPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ResetTokenFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResetTokenPayload>
          }
          findFirst: {
            args: Prisma.ResetTokenFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResetTokenPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ResetTokenFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResetTokenPayload>
          }
          findMany: {
            args: Prisma.ResetTokenFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResetTokenPayload>[]
          }
          create: {
            args: Prisma.ResetTokenCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResetTokenPayload>
          }
          createMany: {
            args: Prisma.ResetTokenCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ResetTokenCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResetTokenPayload>[]
          }
          delete: {
            args: Prisma.ResetTokenDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResetTokenPayload>
          }
          update: {
            args: Prisma.ResetTokenUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResetTokenPayload>
          }
          deleteMany: {
            args: Prisma.ResetTokenDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ResetTokenUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ResetTokenUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResetTokenPayload>[]
          }
          upsert: {
            args: Prisma.ResetTokenUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResetTokenPayload>
          }
          aggregate: {
            args: Prisma.ResetTokenAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateResetToken>
          }
          groupBy: {
            args: Prisma.ResetTokenGroupByArgs<ExtArgs>
            result: $Utils.Optional<ResetTokenGroupByOutputType>[]
          }
          count: {
            args: Prisma.ResetTokenCountArgs<ExtArgs>
            result: $Utils.Optional<ResetTokenCountAggregateOutputType> | number
          }
        }
      }
      Taca: {
        payload: Prisma.$TacaPayload<ExtArgs>
        fields: Prisma.TacaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TacaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TacaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TacaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TacaPayload>
          }
          findFirst: {
            args: Prisma.TacaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TacaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TacaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TacaPayload>
          }
          findMany: {
            args: Prisma.TacaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TacaPayload>[]
          }
          create: {
            args: Prisma.TacaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TacaPayload>
          }
          createMany: {
            args: Prisma.TacaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TacaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TacaPayload>[]
          }
          delete: {
            args: Prisma.TacaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TacaPayload>
          }
          update: {
            args: Prisma.TacaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TacaPayload>
          }
          deleteMany: {
            args: Prisma.TacaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TacaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TacaUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TacaPayload>[]
          }
          upsert: {
            args: Prisma.TacaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TacaPayload>
          }
          aggregate: {
            args: Prisma.TacaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTaca>
          }
          groupBy: {
            args: Prisma.TacaGroupByArgs<ExtArgs>
            result: $Utils.Optional<TacaGroupByOutputType>[]
          }
          count: {
            args: Prisma.TacaCountArgs<ExtArgs>
            result: $Utils.Optional<TacaCountAggregateOutputType> | number
          }
        }
      }
      Medalha: {
        payload: Prisma.$MedalhaPayload<ExtArgs>
        fields: Prisma.MedalhaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MedalhaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedalhaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MedalhaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedalhaPayload>
          }
          findFirst: {
            args: Prisma.MedalhaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedalhaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MedalhaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedalhaPayload>
          }
          findMany: {
            args: Prisma.MedalhaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedalhaPayload>[]
          }
          create: {
            args: Prisma.MedalhaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedalhaPayload>
          }
          createMany: {
            args: Prisma.MedalhaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MedalhaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedalhaPayload>[]
          }
          delete: {
            args: Prisma.MedalhaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedalhaPayload>
          }
          update: {
            args: Prisma.MedalhaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedalhaPayload>
          }
          deleteMany: {
            args: Prisma.MedalhaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MedalhaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MedalhaUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedalhaPayload>[]
          }
          upsert: {
            args: Prisma.MedalhaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedalhaPayload>
          }
          aggregate: {
            args: Prisma.MedalhaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMedalha>
          }
          groupBy: {
            args: Prisma.MedalhaGroupByArgs<ExtArgs>
            result: $Utils.Optional<MedalhaGroupByOutputType>[]
          }
          count: {
            args: Prisma.MedalhaCountArgs<ExtArgs>
            result: $Utils.Optional<MedalhaCountAggregateOutputType> | number
          }
        }
      }
      Trofeu: {
        payload: Prisma.$TrofeuPayload<ExtArgs>
        fields: Prisma.TrofeuFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TrofeuFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrofeuPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TrofeuFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrofeuPayload>
          }
          findFirst: {
            args: Prisma.TrofeuFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrofeuPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TrofeuFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrofeuPayload>
          }
          findMany: {
            args: Prisma.TrofeuFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrofeuPayload>[]
          }
          create: {
            args: Prisma.TrofeuCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrofeuPayload>
          }
          createMany: {
            args: Prisma.TrofeuCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TrofeuCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrofeuPayload>[]
          }
          delete: {
            args: Prisma.TrofeuDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrofeuPayload>
          }
          update: {
            args: Prisma.TrofeuUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrofeuPayload>
          }
          deleteMany: {
            args: Prisma.TrofeuDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TrofeuUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TrofeuUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrofeuPayload>[]
          }
          upsert: {
            args: Prisma.TrofeuUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrofeuPayload>
          }
          aggregate: {
            args: Prisma.TrofeuAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTrofeu>
          }
          groupBy: {
            args: Prisma.TrofeuGroupByArgs<ExtArgs>
            result: $Utils.Optional<TrofeuGroupByOutputType>[]
          }
          count: {
            args: Prisma.TrofeuCountArgs<ExtArgs>
            result: $Utils.Optional<TrofeuCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    session?: SessionOmit
    viagem?: ViagemOmit
    resetToken?: ResetTokenOmit
    taca?: TacaOmit
    medalha?: MedalhaOmit
    trofeu?: TrofeuOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    medalhas: number
    tacas: number
    trofeus: number
    viagens: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    medalhas?: boolean | UserCountOutputTypeCountMedalhasArgs
    tacas?: boolean | UserCountOutputTypeCountTacasArgs
    trofeus?: boolean | UserCountOutputTypeCountTrofeusArgs
    viagens?: boolean | UserCountOutputTypeCountViagensArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMedalhasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MedalhaWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTacasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TacaWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTrofeusArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TrofeuWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountViagensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ViagemWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    password: string | null
    role: $Enums.Role | null
    isApproved: boolean | null
    createdAt: Date | null
    avatar: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    password: string | null
    role: $Enums.Role | null
    isApproved: boolean | null
    createdAt: Date | null
    avatar: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    email: number
    password: number
    role: number
    isApproved: number
    createdAt: number
    avatar: number
    socials: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    role?: true
    isApproved?: true
    createdAt?: true
    avatar?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    role?: true
    isApproved?: true
    createdAt?: true
    avatar?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    role?: true
    isApproved?: true
    createdAt?: true
    avatar?: true
    socials?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    name: string
    email: string
    password: string
    role: $Enums.Role
    isApproved: boolean
    createdAt: Date
    avatar: string | null
    socials: JsonValue | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    isApproved?: boolean
    createdAt?: boolean
    avatar?: boolean
    socials?: boolean
    medalhas?: boolean | User$medalhasArgs<ExtArgs>
    resettokens?: boolean | User$resettokensArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    tacas?: boolean | User$tacasArgs<ExtArgs>
    trofeus?: boolean | User$trofeusArgs<ExtArgs>
    viagens?: boolean | User$viagensArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    isApproved?: boolean
    createdAt?: boolean
    avatar?: boolean
    socials?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    isApproved?: boolean
    createdAt?: boolean
    avatar?: boolean
    socials?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    isApproved?: boolean
    createdAt?: boolean
    avatar?: boolean
    socials?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "email" | "password" | "role" | "isApproved" | "createdAt" | "avatar" | "socials", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    medalhas?: boolean | User$medalhasArgs<ExtArgs>
    resettokens?: boolean | User$resettokensArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    tacas?: boolean | User$tacasArgs<ExtArgs>
    trofeus?: boolean | User$trofeusArgs<ExtArgs>
    viagens?: boolean | User$viagensArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      medalhas: Prisma.$MedalhaPayload<ExtArgs>[]
      resettokens: Prisma.$ResetTokenPayload<ExtArgs> | null
      sessions: Prisma.$SessionPayload<ExtArgs> | null
      tacas: Prisma.$TacaPayload<ExtArgs>[]
      trofeus: Prisma.$TrofeuPayload<ExtArgs>[]
      viagens: Prisma.$ViagemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      email: string
      password: string
      role: $Enums.Role
      isApproved: boolean
      createdAt: Date
      avatar: string | null
      socials: Prisma.JsonValue | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    medalhas<T extends User$medalhasArgs<ExtArgs> = {}>(args?: Subset<T, User$medalhasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MedalhaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    resettokens<T extends User$resettokensArgs<ExtArgs> = {}>(args?: Subset<T, User$resettokensArgs<ExtArgs>>): Prisma__ResetTokenClient<$Result.GetResult<Prisma.$ResetTokenPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    sessions<T extends User$sessionsArgs<ExtArgs> = {}>(args?: Subset<T, User$sessionsArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    tacas<T extends User$tacasArgs<ExtArgs> = {}>(args?: Subset<T, User$tacasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TacaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    trofeus<T extends User$trofeusArgs<ExtArgs> = {}>(args?: Subset<T, User$trofeusArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TrofeuPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    viagens<T extends User$viagensArgs<ExtArgs> = {}>(args?: Subset<T, User$viagensArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ViagemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'Role'>
    readonly isApproved: FieldRef<"User", 'Boolean'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly avatar: FieldRef<"User", 'String'>
    readonly socials: FieldRef<"User", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.medalhas
   */
  export type User$medalhasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medalha
     */
    select?: MedalhaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Medalha
     */
    omit?: MedalhaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedalhaInclude<ExtArgs> | null
    where?: MedalhaWhereInput
    orderBy?: MedalhaOrderByWithRelationInput | MedalhaOrderByWithRelationInput[]
    cursor?: MedalhaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MedalhaScalarFieldEnum | MedalhaScalarFieldEnum[]
  }

  /**
   * User.resettokens
   */
  export type User$resettokensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResetToken
     */
    select?: ResetTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResetToken
     */
    omit?: ResetTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResetTokenInclude<ExtArgs> | null
    where?: ResetTokenWhereInput
  }

  /**
   * User.sessions
   */
  export type User$sessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    where?: SessionWhereInput
  }

  /**
   * User.tacas
   */
  export type User$tacasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Taca
     */
    select?: TacaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Taca
     */
    omit?: TacaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TacaInclude<ExtArgs> | null
    where?: TacaWhereInput
    orderBy?: TacaOrderByWithRelationInput | TacaOrderByWithRelationInput[]
    cursor?: TacaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TacaScalarFieldEnum | TacaScalarFieldEnum[]
  }

  /**
   * User.trofeus
   */
  export type User$trofeusArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trofeu
     */
    select?: TrofeuSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Trofeu
     */
    omit?: TrofeuOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrofeuInclude<ExtArgs> | null
    where?: TrofeuWhereInput
    orderBy?: TrofeuOrderByWithRelationInput | TrofeuOrderByWithRelationInput[]
    cursor?: TrofeuWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TrofeuScalarFieldEnum | TrofeuScalarFieldEnum[]
  }

  /**
   * User.viagens
   */
  export type User$viagensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Viagem
     */
    select?: ViagemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Viagem
     */
    omit?: ViagemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ViagemInclude<ExtArgs> | null
    where?: ViagemWhereInput
    orderBy?: ViagemOrderByWithRelationInput | ViagemOrderByWithRelationInput[]
    cursor?: ViagemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ViagemScalarFieldEnum | ViagemScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Session
   */

  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionMinAggregateOutputType = {
    id: string | null
    token: string | null
    userId: string | null
    expires: Date | null
    createdAt: Date | null
  }

  export type SessionMaxAggregateOutputType = {
    id: string | null
    token: string | null
    userId: string | null
    expires: Date | null
    createdAt: Date | null
  }

  export type SessionCountAggregateOutputType = {
    id: number
    token: number
    userId: number
    expires: number
    createdAt: number
    _all: number
  }


  export type SessionMinAggregateInputType = {
    id?: true
    token?: true
    userId?: true
    expires?: true
    createdAt?: true
  }

  export type SessionMaxAggregateInputType = {
    id?: true
    token?: true
    userId?: true
    expires?: true
    createdAt?: true
  }

  export type SessionCountAggregateInputType = {
    id?: true
    token?: true
    userId?: true
    expires?: true
    createdAt?: true
    _all?: true
  }

  export type SessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Session to aggregate.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithAggregationInput | SessionOrderByWithAggregationInput[]
    by: SessionScalarFieldEnum[] | SessionScalarFieldEnum
    having?: SessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }

  export type SessionGroupByOutputType = {
    id: string
    token: string
    userId: string
    expires: Date
    createdAt: Date
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type SessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    token?: boolean
    userId?: boolean
    expires?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    token?: boolean
    userId?: boolean
    expires?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    token?: boolean
    userId?: boolean
    expires?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectScalar = {
    id?: boolean
    token?: boolean
    userId?: boolean
    expires?: boolean
    createdAt?: boolean
  }

  export type SessionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "token" | "userId" | "expires" | "createdAt", ExtArgs["result"]["session"]>
  export type SessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SessionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $SessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Session"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      token: string
      userId: string
      expires: Date
      createdAt: Date
    }, ExtArgs["result"]["session"]>
    composites: {}
  }

  type SessionGetPayload<S extends boolean | null | undefined | SessionDefaultArgs> = $Result.GetResult<Prisma.$SessionPayload, S>

  type SessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SessionCountAggregateInputType | true
    }

  export interface SessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Session'], meta: { name: 'Session' } }
    /**
     * Find zero or one Session that matches the filter.
     * @param {SessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SessionFindUniqueArgs>(args: SelectSubset<T, SessionFindUniqueArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Session that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SessionFindUniqueOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SessionFindUniqueOrThrowArgs>(args: SelectSubset<T, SessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SessionFindFirstArgs>(args?: SelectSubset<T, SessionFindFirstArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Session that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SessionFindFirstOrThrowArgs>(args?: SelectSubset<T, SessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionWithIdOnly = await prisma.session.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SessionFindManyArgs>(args?: SelectSubset<T, SessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
     */
    create<T extends SessionCreateArgs>(args: SelectSubset<T, SessionCreateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Sessions.
     * @param {SessionCreateManyArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SessionCreateManyArgs>(args?: SelectSubset<T, SessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sessions and returns the data saved in the database.
     * @param {SessionCreateManyAndReturnArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sessions and only return the `id`
     * const sessionWithIdOnly = await prisma.session.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SessionCreateManyAndReturnArgs>(args?: SelectSubset<T, SessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
     */
    delete<T extends SessionDeleteArgs>(args: SelectSubset<T, SessionDeleteArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SessionUpdateArgs>(args: SelectSubset<T, SessionUpdateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SessionDeleteManyArgs>(args?: SelectSubset<T, SessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SessionUpdateManyArgs>(args: SelectSubset<T, SessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions and returns the data updated in the database.
     * @param {SessionUpdateManyAndReturnArgs} args - Arguments to update many Sessions.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Sessions and only return the `id`
     * const sessionWithIdOnly = await prisma.session.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SessionUpdateManyAndReturnArgs>(args: SelectSubset<T, SessionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
     */
    upsert<T extends SessionUpsertArgs>(args: SelectSubset<T, SessionUpsertArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionCountArgs>(
      args?: Subset<T, SessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): Prisma.PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Session model
   */
  readonly fields: SessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Session model
   */
  interface SessionFieldRefs {
    readonly id: FieldRef<"Session", 'String'>
    readonly token: FieldRef<"Session", 'String'>
    readonly userId: FieldRef<"Session", 'String'>
    readonly expires: FieldRef<"Session", 'DateTime'>
    readonly createdAt: FieldRef<"Session", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Session findUnique
   */
  export type SessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findUniqueOrThrow
   */
  export type SessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findFirst
   */
  export type SessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findFirstOrThrow
   */
  export type SessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findMany
   */
  export type SessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Sessions to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session create
   */
  export type SessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to create a Session.
     */
    data: XOR<SessionCreateInput, SessionUncheckedCreateInput>
  }

  /**
   * Session createMany
   */
  export type SessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Session createManyAndReturn
   */
  export type SessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Session update
   */
  export type SessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to update a Session.
     */
    data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
    /**
     * Choose, which Session to update.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to update.
     */
    limit?: number
  }

  /**
   * Session updateManyAndReturn
   */
  export type SessionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Session upsert
   */
  export type SessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The filter to search for the Session to update in case it exists.
     */
    where: SessionWhereUniqueInput
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
     */
    create: XOR<SessionCreateInput, SessionUncheckedCreateInput>
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
  }

  /**
   * Session delete
   */
  export type SessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter which Session to delete.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sessions to delete
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to delete.
     */
    limit?: number
  }

  /**
   * Session without action
   */
  export type SessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
  }


  /**
   * Model Viagem
   */

  export type AggregateViagem = {
    _count: ViagemCountAggregateOutputType | null
    _avg: ViagemAvgAggregateOutputType | null
    _sum: ViagemSumAggregateOutputType | null
    _min: ViagemMinAggregateOutputType | null
    _max: ViagemMaxAggregateOutputType | null
  }

  export type ViagemAvgAggregateOutputType = {
    distancia: number | null
    dano: number | null
    velocidadeMax: number | null
  }

  export type ViagemSumAggregateOutputType = {
    distancia: number | null
    dano: number | null
    velocidadeMax: number | null
  }

  export type ViagemMinAggregateOutputType = {
    id: string | null
    motoristaId: string | null
    camiao: string | null
    origem: string | null
    destino: string | null
    distancia: number | null
    dano: number | null
    velocidadeMax: number | null
    hora: Date | null
    data: Date | null
    game: $Enums.Game | null
    carga: string | null
    lucro: string | null
  }

  export type ViagemMaxAggregateOutputType = {
    id: string | null
    motoristaId: string | null
    camiao: string | null
    origem: string | null
    destino: string | null
    distancia: number | null
    dano: number | null
    velocidadeMax: number | null
    hora: Date | null
    data: Date | null
    game: $Enums.Game | null
    carga: string | null
    lucro: string | null
  }

  export type ViagemCountAggregateOutputType = {
    id: number
    motoristaId: number
    camiao: number
    origem: number
    destino: number
    distancia: number
    dano: number
    velocidadeMax: number
    hora: number
    data: number
    game: number
    carga: number
    lucro: number
    _all: number
  }


  export type ViagemAvgAggregateInputType = {
    distancia?: true
    dano?: true
    velocidadeMax?: true
  }

  export type ViagemSumAggregateInputType = {
    distancia?: true
    dano?: true
    velocidadeMax?: true
  }

  export type ViagemMinAggregateInputType = {
    id?: true
    motoristaId?: true
    camiao?: true
    origem?: true
    destino?: true
    distancia?: true
    dano?: true
    velocidadeMax?: true
    hora?: true
    data?: true
    game?: true
    carga?: true
    lucro?: true
  }

  export type ViagemMaxAggregateInputType = {
    id?: true
    motoristaId?: true
    camiao?: true
    origem?: true
    destino?: true
    distancia?: true
    dano?: true
    velocidadeMax?: true
    hora?: true
    data?: true
    game?: true
    carga?: true
    lucro?: true
  }

  export type ViagemCountAggregateInputType = {
    id?: true
    motoristaId?: true
    camiao?: true
    origem?: true
    destino?: true
    distancia?: true
    dano?: true
    velocidadeMax?: true
    hora?: true
    data?: true
    game?: true
    carga?: true
    lucro?: true
    _all?: true
  }

  export type ViagemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Viagem to aggregate.
     */
    where?: ViagemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Viagems to fetch.
     */
    orderBy?: ViagemOrderByWithRelationInput | ViagemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ViagemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Viagems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Viagems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Viagems
    **/
    _count?: true | ViagemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ViagemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ViagemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ViagemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ViagemMaxAggregateInputType
  }

  export type GetViagemAggregateType<T extends ViagemAggregateArgs> = {
        [P in keyof T & keyof AggregateViagem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateViagem[P]>
      : GetScalarType<T[P], AggregateViagem[P]>
  }




  export type ViagemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ViagemWhereInput
    orderBy?: ViagemOrderByWithAggregationInput | ViagemOrderByWithAggregationInput[]
    by: ViagemScalarFieldEnum[] | ViagemScalarFieldEnum
    having?: ViagemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ViagemCountAggregateInputType | true
    _avg?: ViagemAvgAggregateInputType
    _sum?: ViagemSumAggregateInputType
    _min?: ViagemMinAggregateInputType
    _max?: ViagemMaxAggregateInputType
  }

  export type ViagemGroupByOutputType = {
    id: string
    motoristaId: string
    camiao: string
    origem: string
    destino: string
    distancia: number
    dano: number | null
    velocidadeMax: number | null
    hora: Date
    data: Date
    game: $Enums.Game
    carga: string | null
    lucro: string | null
    _count: ViagemCountAggregateOutputType | null
    _avg: ViagemAvgAggregateOutputType | null
    _sum: ViagemSumAggregateOutputType | null
    _min: ViagemMinAggregateOutputType | null
    _max: ViagemMaxAggregateOutputType | null
  }

  type GetViagemGroupByPayload<T extends ViagemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ViagemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ViagemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ViagemGroupByOutputType[P]>
            : GetScalarType<T[P], ViagemGroupByOutputType[P]>
        }
      >
    >


  export type ViagemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    motoristaId?: boolean
    camiao?: boolean
    origem?: boolean
    destino?: boolean
    distancia?: boolean
    dano?: boolean
    velocidadeMax?: boolean
    hora?: boolean
    data?: boolean
    game?: boolean
    carga?: boolean
    lucro?: boolean
    motorista?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["viagem"]>

  export type ViagemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    motoristaId?: boolean
    camiao?: boolean
    origem?: boolean
    destino?: boolean
    distancia?: boolean
    dano?: boolean
    velocidadeMax?: boolean
    hora?: boolean
    data?: boolean
    game?: boolean
    carga?: boolean
    lucro?: boolean
    motorista?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["viagem"]>

  export type ViagemSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    motoristaId?: boolean
    camiao?: boolean
    origem?: boolean
    destino?: boolean
    distancia?: boolean
    dano?: boolean
    velocidadeMax?: boolean
    hora?: boolean
    data?: boolean
    game?: boolean
    carga?: boolean
    lucro?: boolean
    motorista?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["viagem"]>

  export type ViagemSelectScalar = {
    id?: boolean
    motoristaId?: boolean
    camiao?: boolean
    origem?: boolean
    destino?: boolean
    distancia?: boolean
    dano?: boolean
    velocidadeMax?: boolean
    hora?: boolean
    data?: boolean
    game?: boolean
    carga?: boolean
    lucro?: boolean
  }

  export type ViagemOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "motoristaId" | "camiao" | "origem" | "destino" | "distancia" | "dano" | "velocidadeMax" | "hora" | "data" | "game" | "carga" | "lucro", ExtArgs["result"]["viagem"]>
  export type ViagemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    motorista?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ViagemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    motorista?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ViagemIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    motorista?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ViagemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Viagem"
    objects: {
      motorista: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      motoristaId: string
      camiao: string
      origem: string
      destino: string
      distancia: number
      dano: number | null
      velocidadeMax: number | null
      hora: Date
      data: Date
      game: $Enums.Game
      carga: string | null
      lucro: string | null
    }, ExtArgs["result"]["viagem"]>
    composites: {}
  }

  type ViagemGetPayload<S extends boolean | null | undefined | ViagemDefaultArgs> = $Result.GetResult<Prisma.$ViagemPayload, S>

  type ViagemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ViagemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ViagemCountAggregateInputType | true
    }

  export interface ViagemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Viagem'], meta: { name: 'Viagem' } }
    /**
     * Find zero or one Viagem that matches the filter.
     * @param {ViagemFindUniqueArgs} args - Arguments to find a Viagem
     * @example
     * // Get one Viagem
     * const viagem = await prisma.viagem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ViagemFindUniqueArgs>(args: SelectSubset<T, ViagemFindUniqueArgs<ExtArgs>>): Prisma__ViagemClient<$Result.GetResult<Prisma.$ViagemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Viagem that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ViagemFindUniqueOrThrowArgs} args - Arguments to find a Viagem
     * @example
     * // Get one Viagem
     * const viagem = await prisma.viagem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ViagemFindUniqueOrThrowArgs>(args: SelectSubset<T, ViagemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ViagemClient<$Result.GetResult<Prisma.$ViagemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Viagem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ViagemFindFirstArgs} args - Arguments to find a Viagem
     * @example
     * // Get one Viagem
     * const viagem = await prisma.viagem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ViagemFindFirstArgs>(args?: SelectSubset<T, ViagemFindFirstArgs<ExtArgs>>): Prisma__ViagemClient<$Result.GetResult<Prisma.$ViagemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Viagem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ViagemFindFirstOrThrowArgs} args - Arguments to find a Viagem
     * @example
     * // Get one Viagem
     * const viagem = await prisma.viagem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ViagemFindFirstOrThrowArgs>(args?: SelectSubset<T, ViagemFindFirstOrThrowArgs<ExtArgs>>): Prisma__ViagemClient<$Result.GetResult<Prisma.$ViagemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Viagems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ViagemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Viagems
     * const viagems = await prisma.viagem.findMany()
     * 
     * // Get first 10 Viagems
     * const viagems = await prisma.viagem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const viagemWithIdOnly = await prisma.viagem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ViagemFindManyArgs>(args?: SelectSubset<T, ViagemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ViagemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Viagem.
     * @param {ViagemCreateArgs} args - Arguments to create a Viagem.
     * @example
     * // Create one Viagem
     * const Viagem = await prisma.viagem.create({
     *   data: {
     *     // ... data to create a Viagem
     *   }
     * })
     * 
     */
    create<T extends ViagemCreateArgs>(args: SelectSubset<T, ViagemCreateArgs<ExtArgs>>): Prisma__ViagemClient<$Result.GetResult<Prisma.$ViagemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Viagems.
     * @param {ViagemCreateManyArgs} args - Arguments to create many Viagems.
     * @example
     * // Create many Viagems
     * const viagem = await prisma.viagem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ViagemCreateManyArgs>(args?: SelectSubset<T, ViagemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Viagems and returns the data saved in the database.
     * @param {ViagemCreateManyAndReturnArgs} args - Arguments to create many Viagems.
     * @example
     * // Create many Viagems
     * const viagem = await prisma.viagem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Viagems and only return the `id`
     * const viagemWithIdOnly = await prisma.viagem.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ViagemCreateManyAndReturnArgs>(args?: SelectSubset<T, ViagemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ViagemPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Viagem.
     * @param {ViagemDeleteArgs} args - Arguments to delete one Viagem.
     * @example
     * // Delete one Viagem
     * const Viagem = await prisma.viagem.delete({
     *   where: {
     *     // ... filter to delete one Viagem
     *   }
     * })
     * 
     */
    delete<T extends ViagemDeleteArgs>(args: SelectSubset<T, ViagemDeleteArgs<ExtArgs>>): Prisma__ViagemClient<$Result.GetResult<Prisma.$ViagemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Viagem.
     * @param {ViagemUpdateArgs} args - Arguments to update one Viagem.
     * @example
     * // Update one Viagem
     * const viagem = await prisma.viagem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ViagemUpdateArgs>(args: SelectSubset<T, ViagemUpdateArgs<ExtArgs>>): Prisma__ViagemClient<$Result.GetResult<Prisma.$ViagemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Viagems.
     * @param {ViagemDeleteManyArgs} args - Arguments to filter Viagems to delete.
     * @example
     * // Delete a few Viagems
     * const { count } = await prisma.viagem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ViagemDeleteManyArgs>(args?: SelectSubset<T, ViagemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Viagems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ViagemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Viagems
     * const viagem = await prisma.viagem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ViagemUpdateManyArgs>(args: SelectSubset<T, ViagemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Viagems and returns the data updated in the database.
     * @param {ViagemUpdateManyAndReturnArgs} args - Arguments to update many Viagems.
     * @example
     * // Update many Viagems
     * const viagem = await prisma.viagem.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Viagems and only return the `id`
     * const viagemWithIdOnly = await prisma.viagem.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ViagemUpdateManyAndReturnArgs>(args: SelectSubset<T, ViagemUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ViagemPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Viagem.
     * @param {ViagemUpsertArgs} args - Arguments to update or create a Viagem.
     * @example
     * // Update or create a Viagem
     * const viagem = await prisma.viagem.upsert({
     *   create: {
     *     // ... data to create a Viagem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Viagem we want to update
     *   }
     * })
     */
    upsert<T extends ViagemUpsertArgs>(args: SelectSubset<T, ViagemUpsertArgs<ExtArgs>>): Prisma__ViagemClient<$Result.GetResult<Prisma.$ViagemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Viagems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ViagemCountArgs} args - Arguments to filter Viagems to count.
     * @example
     * // Count the number of Viagems
     * const count = await prisma.viagem.count({
     *   where: {
     *     // ... the filter for the Viagems we want to count
     *   }
     * })
    **/
    count<T extends ViagemCountArgs>(
      args?: Subset<T, ViagemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ViagemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Viagem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ViagemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ViagemAggregateArgs>(args: Subset<T, ViagemAggregateArgs>): Prisma.PrismaPromise<GetViagemAggregateType<T>>

    /**
     * Group by Viagem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ViagemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ViagemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ViagemGroupByArgs['orderBy'] }
        : { orderBy?: ViagemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ViagemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetViagemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Viagem model
   */
  readonly fields: ViagemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Viagem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ViagemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    motorista<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Viagem model
   */
  interface ViagemFieldRefs {
    readonly id: FieldRef<"Viagem", 'String'>
    readonly motoristaId: FieldRef<"Viagem", 'String'>
    readonly camiao: FieldRef<"Viagem", 'String'>
    readonly origem: FieldRef<"Viagem", 'String'>
    readonly destino: FieldRef<"Viagem", 'String'>
    readonly distancia: FieldRef<"Viagem", 'Int'>
    readonly dano: FieldRef<"Viagem", 'Int'>
    readonly velocidadeMax: FieldRef<"Viagem", 'Int'>
    readonly hora: FieldRef<"Viagem", 'DateTime'>
    readonly data: FieldRef<"Viagem", 'DateTime'>
    readonly game: FieldRef<"Viagem", 'Game'>
    readonly carga: FieldRef<"Viagem", 'String'>
    readonly lucro: FieldRef<"Viagem", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Viagem findUnique
   */
  export type ViagemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Viagem
     */
    select?: ViagemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Viagem
     */
    omit?: ViagemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ViagemInclude<ExtArgs> | null
    /**
     * Filter, which Viagem to fetch.
     */
    where: ViagemWhereUniqueInput
  }

  /**
   * Viagem findUniqueOrThrow
   */
  export type ViagemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Viagem
     */
    select?: ViagemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Viagem
     */
    omit?: ViagemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ViagemInclude<ExtArgs> | null
    /**
     * Filter, which Viagem to fetch.
     */
    where: ViagemWhereUniqueInput
  }

  /**
   * Viagem findFirst
   */
  export type ViagemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Viagem
     */
    select?: ViagemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Viagem
     */
    omit?: ViagemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ViagemInclude<ExtArgs> | null
    /**
     * Filter, which Viagem to fetch.
     */
    where?: ViagemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Viagems to fetch.
     */
    orderBy?: ViagemOrderByWithRelationInput | ViagemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Viagems.
     */
    cursor?: ViagemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Viagems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Viagems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Viagems.
     */
    distinct?: ViagemScalarFieldEnum | ViagemScalarFieldEnum[]
  }

  /**
   * Viagem findFirstOrThrow
   */
  export type ViagemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Viagem
     */
    select?: ViagemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Viagem
     */
    omit?: ViagemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ViagemInclude<ExtArgs> | null
    /**
     * Filter, which Viagem to fetch.
     */
    where?: ViagemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Viagems to fetch.
     */
    orderBy?: ViagemOrderByWithRelationInput | ViagemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Viagems.
     */
    cursor?: ViagemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Viagems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Viagems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Viagems.
     */
    distinct?: ViagemScalarFieldEnum | ViagemScalarFieldEnum[]
  }

  /**
   * Viagem findMany
   */
  export type ViagemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Viagem
     */
    select?: ViagemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Viagem
     */
    omit?: ViagemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ViagemInclude<ExtArgs> | null
    /**
     * Filter, which Viagems to fetch.
     */
    where?: ViagemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Viagems to fetch.
     */
    orderBy?: ViagemOrderByWithRelationInput | ViagemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Viagems.
     */
    cursor?: ViagemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Viagems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Viagems.
     */
    skip?: number
    distinct?: ViagemScalarFieldEnum | ViagemScalarFieldEnum[]
  }

  /**
   * Viagem create
   */
  export type ViagemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Viagem
     */
    select?: ViagemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Viagem
     */
    omit?: ViagemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ViagemInclude<ExtArgs> | null
    /**
     * The data needed to create a Viagem.
     */
    data: XOR<ViagemCreateInput, ViagemUncheckedCreateInput>
  }

  /**
   * Viagem createMany
   */
  export type ViagemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Viagems.
     */
    data: ViagemCreateManyInput | ViagemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Viagem createManyAndReturn
   */
  export type ViagemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Viagem
     */
    select?: ViagemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Viagem
     */
    omit?: ViagemOmit<ExtArgs> | null
    /**
     * The data used to create many Viagems.
     */
    data: ViagemCreateManyInput | ViagemCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ViagemIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Viagem update
   */
  export type ViagemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Viagem
     */
    select?: ViagemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Viagem
     */
    omit?: ViagemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ViagemInclude<ExtArgs> | null
    /**
     * The data needed to update a Viagem.
     */
    data: XOR<ViagemUpdateInput, ViagemUncheckedUpdateInput>
    /**
     * Choose, which Viagem to update.
     */
    where: ViagemWhereUniqueInput
  }

  /**
   * Viagem updateMany
   */
  export type ViagemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Viagems.
     */
    data: XOR<ViagemUpdateManyMutationInput, ViagemUncheckedUpdateManyInput>
    /**
     * Filter which Viagems to update
     */
    where?: ViagemWhereInput
    /**
     * Limit how many Viagems to update.
     */
    limit?: number
  }

  /**
   * Viagem updateManyAndReturn
   */
  export type ViagemUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Viagem
     */
    select?: ViagemSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Viagem
     */
    omit?: ViagemOmit<ExtArgs> | null
    /**
     * The data used to update Viagems.
     */
    data: XOR<ViagemUpdateManyMutationInput, ViagemUncheckedUpdateManyInput>
    /**
     * Filter which Viagems to update
     */
    where?: ViagemWhereInput
    /**
     * Limit how many Viagems to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ViagemIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Viagem upsert
   */
  export type ViagemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Viagem
     */
    select?: ViagemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Viagem
     */
    omit?: ViagemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ViagemInclude<ExtArgs> | null
    /**
     * The filter to search for the Viagem to update in case it exists.
     */
    where: ViagemWhereUniqueInput
    /**
     * In case the Viagem found by the `where` argument doesn't exist, create a new Viagem with this data.
     */
    create: XOR<ViagemCreateInput, ViagemUncheckedCreateInput>
    /**
     * In case the Viagem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ViagemUpdateInput, ViagemUncheckedUpdateInput>
  }

  /**
   * Viagem delete
   */
  export type ViagemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Viagem
     */
    select?: ViagemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Viagem
     */
    omit?: ViagemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ViagemInclude<ExtArgs> | null
    /**
     * Filter which Viagem to delete.
     */
    where: ViagemWhereUniqueInput
  }

  /**
   * Viagem deleteMany
   */
  export type ViagemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Viagems to delete
     */
    where?: ViagemWhereInput
    /**
     * Limit how many Viagems to delete.
     */
    limit?: number
  }

  /**
   * Viagem without action
   */
  export type ViagemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Viagem
     */
    select?: ViagemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Viagem
     */
    omit?: ViagemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ViagemInclude<ExtArgs> | null
  }


  /**
   * Model ResetToken
   */

  export type AggregateResetToken = {
    _count: ResetTokenCountAggregateOutputType | null
    _min: ResetTokenMinAggregateOutputType | null
    _max: ResetTokenMaxAggregateOutputType | null
  }

  export type ResetTokenMinAggregateOutputType = {
    token: string | null
    userId: string | null
    expires: Date | null
    createdAt: Date | null
  }

  export type ResetTokenMaxAggregateOutputType = {
    token: string | null
    userId: string | null
    expires: Date | null
    createdAt: Date | null
  }

  export type ResetTokenCountAggregateOutputType = {
    token: number
    userId: number
    expires: number
    createdAt: number
    _all: number
  }


  export type ResetTokenMinAggregateInputType = {
    token?: true
    userId?: true
    expires?: true
    createdAt?: true
  }

  export type ResetTokenMaxAggregateInputType = {
    token?: true
    userId?: true
    expires?: true
    createdAt?: true
  }

  export type ResetTokenCountAggregateInputType = {
    token?: true
    userId?: true
    expires?: true
    createdAt?: true
    _all?: true
  }

  export type ResetTokenAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ResetToken to aggregate.
     */
    where?: ResetTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ResetTokens to fetch.
     */
    orderBy?: ResetTokenOrderByWithRelationInput | ResetTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ResetTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ResetTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ResetTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ResetTokens
    **/
    _count?: true | ResetTokenCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ResetTokenMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ResetTokenMaxAggregateInputType
  }

  export type GetResetTokenAggregateType<T extends ResetTokenAggregateArgs> = {
        [P in keyof T & keyof AggregateResetToken]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateResetToken[P]>
      : GetScalarType<T[P], AggregateResetToken[P]>
  }




  export type ResetTokenGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ResetTokenWhereInput
    orderBy?: ResetTokenOrderByWithAggregationInput | ResetTokenOrderByWithAggregationInput[]
    by: ResetTokenScalarFieldEnum[] | ResetTokenScalarFieldEnum
    having?: ResetTokenScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ResetTokenCountAggregateInputType | true
    _min?: ResetTokenMinAggregateInputType
    _max?: ResetTokenMaxAggregateInputType
  }

  export type ResetTokenGroupByOutputType = {
    token: string
    userId: string
    expires: Date
    createdAt: Date
    _count: ResetTokenCountAggregateOutputType | null
    _min: ResetTokenMinAggregateOutputType | null
    _max: ResetTokenMaxAggregateOutputType | null
  }

  type GetResetTokenGroupByPayload<T extends ResetTokenGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ResetTokenGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ResetTokenGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ResetTokenGroupByOutputType[P]>
            : GetScalarType<T[P], ResetTokenGroupByOutputType[P]>
        }
      >
    >


  export type ResetTokenSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    token?: boolean
    userId?: boolean
    expires?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["resetToken"]>

  export type ResetTokenSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    token?: boolean
    userId?: boolean
    expires?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["resetToken"]>

  export type ResetTokenSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    token?: boolean
    userId?: boolean
    expires?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["resetToken"]>

  export type ResetTokenSelectScalar = {
    token?: boolean
    userId?: boolean
    expires?: boolean
    createdAt?: boolean
  }

  export type ResetTokenOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"token" | "userId" | "expires" | "createdAt", ExtArgs["result"]["resetToken"]>
  export type ResetTokenInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ResetTokenIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ResetTokenIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ResetTokenPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ResetToken"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      token: string
      userId: string
      expires: Date
      createdAt: Date
    }, ExtArgs["result"]["resetToken"]>
    composites: {}
  }

  type ResetTokenGetPayload<S extends boolean | null | undefined | ResetTokenDefaultArgs> = $Result.GetResult<Prisma.$ResetTokenPayload, S>

  type ResetTokenCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ResetTokenFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ResetTokenCountAggregateInputType | true
    }

  export interface ResetTokenDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ResetToken'], meta: { name: 'ResetToken' } }
    /**
     * Find zero or one ResetToken that matches the filter.
     * @param {ResetTokenFindUniqueArgs} args - Arguments to find a ResetToken
     * @example
     * // Get one ResetToken
     * const resetToken = await prisma.resetToken.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ResetTokenFindUniqueArgs>(args: SelectSubset<T, ResetTokenFindUniqueArgs<ExtArgs>>): Prisma__ResetTokenClient<$Result.GetResult<Prisma.$ResetTokenPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ResetToken that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ResetTokenFindUniqueOrThrowArgs} args - Arguments to find a ResetToken
     * @example
     * // Get one ResetToken
     * const resetToken = await prisma.resetToken.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ResetTokenFindUniqueOrThrowArgs>(args: SelectSubset<T, ResetTokenFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ResetTokenClient<$Result.GetResult<Prisma.$ResetTokenPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ResetToken that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResetTokenFindFirstArgs} args - Arguments to find a ResetToken
     * @example
     * // Get one ResetToken
     * const resetToken = await prisma.resetToken.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ResetTokenFindFirstArgs>(args?: SelectSubset<T, ResetTokenFindFirstArgs<ExtArgs>>): Prisma__ResetTokenClient<$Result.GetResult<Prisma.$ResetTokenPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ResetToken that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResetTokenFindFirstOrThrowArgs} args - Arguments to find a ResetToken
     * @example
     * // Get one ResetToken
     * const resetToken = await prisma.resetToken.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ResetTokenFindFirstOrThrowArgs>(args?: SelectSubset<T, ResetTokenFindFirstOrThrowArgs<ExtArgs>>): Prisma__ResetTokenClient<$Result.GetResult<Prisma.$ResetTokenPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ResetTokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResetTokenFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ResetTokens
     * const resetTokens = await prisma.resetToken.findMany()
     * 
     * // Get first 10 ResetTokens
     * const resetTokens = await prisma.resetToken.findMany({ take: 10 })
     * 
     * // Only select the `token`
     * const resetTokenWithTokenOnly = await prisma.resetToken.findMany({ select: { token: true } })
     * 
     */
    findMany<T extends ResetTokenFindManyArgs>(args?: SelectSubset<T, ResetTokenFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResetTokenPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ResetToken.
     * @param {ResetTokenCreateArgs} args - Arguments to create a ResetToken.
     * @example
     * // Create one ResetToken
     * const ResetToken = await prisma.resetToken.create({
     *   data: {
     *     // ... data to create a ResetToken
     *   }
     * })
     * 
     */
    create<T extends ResetTokenCreateArgs>(args: SelectSubset<T, ResetTokenCreateArgs<ExtArgs>>): Prisma__ResetTokenClient<$Result.GetResult<Prisma.$ResetTokenPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ResetTokens.
     * @param {ResetTokenCreateManyArgs} args - Arguments to create many ResetTokens.
     * @example
     * // Create many ResetTokens
     * const resetToken = await prisma.resetToken.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ResetTokenCreateManyArgs>(args?: SelectSubset<T, ResetTokenCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ResetTokens and returns the data saved in the database.
     * @param {ResetTokenCreateManyAndReturnArgs} args - Arguments to create many ResetTokens.
     * @example
     * // Create many ResetTokens
     * const resetToken = await prisma.resetToken.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ResetTokens and only return the `token`
     * const resetTokenWithTokenOnly = await prisma.resetToken.createManyAndReturn({
     *   select: { token: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ResetTokenCreateManyAndReturnArgs>(args?: SelectSubset<T, ResetTokenCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResetTokenPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ResetToken.
     * @param {ResetTokenDeleteArgs} args - Arguments to delete one ResetToken.
     * @example
     * // Delete one ResetToken
     * const ResetToken = await prisma.resetToken.delete({
     *   where: {
     *     // ... filter to delete one ResetToken
     *   }
     * })
     * 
     */
    delete<T extends ResetTokenDeleteArgs>(args: SelectSubset<T, ResetTokenDeleteArgs<ExtArgs>>): Prisma__ResetTokenClient<$Result.GetResult<Prisma.$ResetTokenPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ResetToken.
     * @param {ResetTokenUpdateArgs} args - Arguments to update one ResetToken.
     * @example
     * // Update one ResetToken
     * const resetToken = await prisma.resetToken.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ResetTokenUpdateArgs>(args: SelectSubset<T, ResetTokenUpdateArgs<ExtArgs>>): Prisma__ResetTokenClient<$Result.GetResult<Prisma.$ResetTokenPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ResetTokens.
     * @param {ResetTokenDeleteManyArgs} args - Arguments to filter ResetTokens to delete.
     * @example
     * // Delete a few ResetTokens
     * const { count } = await prisma.resetToken.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ResetTokenDeleteManyArgs>(args?: SelectSubset<T, ResetTokenDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ResetTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResetTokenUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ResetTokens
     * const resetToken = await prisma.resetToken.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ResetTokenUpdateManyArgs>(args: SelectSubset<T, ResetTokenUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ResetTokens and returns the data updated in the database.
     * @param {ResetTokenUpdateManyAndReturnArgs} args - Arguments to update many ResetTokens.
     * @example
     * // Update many ResetTokens
     * const resetToken = await prisma.resetToken.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ResetTokens and only return the `token`
     * const resetTokenWithTokenOnly = await prisma.resetToken.updateManyAndReturn({
     *   select: { token: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ResetTokenUpdateManyAndReturnArgs>(args: SelectSubset<T, ResetTokenUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResetTokenPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ResetToken.
     * @param {ResetTokenUpsertArgs} args - Arguments to update or create a ResetToken.
     * @example
     * // Update or create a ResetToken
     * const resetToken = await prisma.resetToken.upsert({
     *   create: {
     *     // ... data to create a ResetToken
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ResetToken we want to update
     *   }
     * })
     */
    upsert<T extends ResetTokenUpsertArgs>(args: SelectSubset<T, ResetTokenUpsertArgs<ExtArgs>>): Prisma__ResetTokenClient<$Result.GetResult<Prisma.$ResetTokenPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ResetTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResetTokenCountArgs} args - Arguments to filter ResetTokens to count.
     * @example
     * // Count the number of ResetTokens
     * const count = await prisma.resetToken.count({
     *   where: {
     *     // ... the filter for the ResetTokens we want to count
     *   }
     * })
    **/
    count<T extends ResetTokenCountArgs>(
      args?: Subset<T, ResetTokenCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ResetTokenCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ResetToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResetTokenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ResetTokenAggregateArgs>(args: Subset<T, ResetTokenAggregateArgs>): Prisma.PrismaPromise<GetResetTokenAggregateType<T>>

    /**
     * Group by ResetToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResetTokenGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ResetTokenGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ResetTokenGroupByArgs['orderBy'] }
        : { orderBy?: ResetTokenGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ResetTokenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetResetTokenGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ResetToken model
   */
  readonly fields: ResetTokenFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ResetToken.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ResetTokenClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ResetToken model
   */
  interface ResetTokenFieldRefs {
    readonly token: FieldRef<"ResetToken", 'String'>
    readonly userId: FieldRef<"ResetToken", 'String'>
    readonly expires: FieldRef<"ResetToken", 'DateTime'>
    readonly createdAt: FieldRef<"ResetToken", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ResetToken findUnique
   */
  export type ResetTokenFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResetToken
     */
    select?: ResetTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResetToken
     */
    omit?: ResetTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResetTokenInclude<ExtArgs> | null
    /**
     * Filter, which ResetToken to fetch.
     */
    where: ResetTokenWhereUniqueInput
  }

  /**
   * ResetToken findUniqueOrThrow
   */
  export type ResetTokenFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResetToken
     */
    select?: ResetTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResetToken
     */
    omit?: ResetTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResetTokenInclude<ExtArgs> | null
    /**
     * Filter, which ResetToken to fetch.
     */
    where: ResetTokenWhereUniqueInput
  }

  /**
   * ResetToken findFirst
   */
  export type ResetTokenFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResetToken
     */
    select?: ResetTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResetToken
     */
    omit?: ResetTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResetTokenInclude<ExtArgs> | null
    /**
     * Filter, which ResetToken to fetch.
     */
    where?: ResetTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ResetTokens to fetch.
     */
    orderBy?: ResetTokenOrderByWithRelationInput | ResetTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ResetTokens.
     */
    cursor?: ResetTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ResetTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ResetTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ResetTokens.
     */
    distinct?: ResetTokenScalarFieldEnum | ResetTokenScalarFieldEnum[]
  }

  /**
   * ResetToken findFirstOrThrow
   */
  export type ResetTokenFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResetToken
     */
    select?: ResetTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResetToken
     */
    omit?: ResetTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResetTokenInclude<ExtArgs> | null
    /**
     * Filter, which ResetToken to fetch.
     */
    where?: ResetTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ResetTokens to fetch.
     */
    orderBy?: ResetTokenOrderByWithRelationInput | ResetTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ResetTokens.
     */
    cursor?: ResetTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ResetTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ResetTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ResetTokens.
     */
    distinct?: ResetTokenScalarFieldEnum | ResetTokenScalarFieldEnum[]
  }

  /**
   * ResetToken findMany
   */
  export type ResetTokenFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResetToken
     */
    select?: ResetTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResetToken
     */
    omit?: ResetTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResetTokenInclude<ExtArgs> | null
    /**
     * Filter, which ResetTokens to fetch.
     */
    where?: ResetTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ResetTokens to fetch.
     */
    orderBy?: ResetTokenOrderByWithRelationInput | ResetTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ResetTokens.
     */
    cursor?: ResetTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ResetTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ResetTokens.
     */
    skip?: number
    distinct?: ResetTokenScalarFieldEnum | ResetTokenScalarFieldEnum[]
  }

  /**
   * ResetToken create
   */
  export type ResetTokenCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResetToken
     */
    select?: ResetTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResetToken
     */
    omit?: ResetTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResetTokenInclude<ExtArgs> | null
    /**
     * The data needed to create a ResetToken.
     */
    data: XOR<ResetTokenCreateInput, ResetTokenUncheckedCreateInput>
  }

  /**
   * ResetToken createMany
   */
  export type ResetTokenCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ResetTokens.
     */
    data: ResetTokenCreateManyInput | ResetTokenCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ResetToken createManyAndReturn
   */
  export type ResetTokenCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResetToken
     */
    select?: ResetTokenSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ResetToken
     */
    omit?: ResetTokenOmit<ExtArgs> | null
    /**
     * The data used to create many ResetTokens.
     */
    data: ResetTokenCreateManyInput | ResetTokenCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResetTokenIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ResetToken update
   */
  export type ResetTokenUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResetToken
     */
    select?: ResetTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResetToken
     */
    omit?: ResetTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResetTokenInclude<ExtArgs> | null
    /**
     * The data needed to update a ResetToken.
     */
    data: XOR<ResetTokenUpdateInput, ResetTokenUncheckedUpdateInput>
    /**
     * Choose, which ResetToken to update.
     */
    where: ResetTokenWhereUniqueInput
  }

  /**
   * ResetToken updateMany
   */
  export type ResetTokenUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ResetTokens.
     */
    data: XOR<ResetTokenUpdateManyMutationInput, ResetTokenUncheckedUpdateManyInput>
    /**
     * Filter which ResetTokens to update
     */
    where?: ResetTokenWhereInput
    /**
     * Limit how many ResetTokens to update.
     */
    limit?: number
  }

  /**
   * ResetToken updateManyAndReturn
   */
  export type ResetTokenUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResetToken
     */
    select?: ResetTokenSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ResetToken
     */
    omit?: ResetTokenOmit<ExtArgs> | null
    /**
     * The data used to update ResetTokens.
     */
    data: XOR<ResetTokenUpdateManyMutationInput, ResetTokenUncheckedUpdateManyInput>
    /**
     * Filter which ResetTokens to update
     */
    where?: ResetTokenWhereInput
    /**
     * Limit how many ResetTokens to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResetTokenIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ResetToken upsert
   */
  export type ResetTokenUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResetToken
     */
    select?: ResetTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResetToken
     */
    omit?: ResetTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResetTokenInclude<ExtArgs> | null
    /**
     * The filter to search for the ResetToken to update in case it exists.
     */
    where: ResetTokenWhereUniqueInput
    /**
     * In case the ResetToken found by the `where` argument doesn't exist, create a new ResetToken with this data.
     */
    create: XOR<ResetTokenCreateInput, ResetTokenUncheckedCreateInput>
    /**
     * In case the ResetToken was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ResetTokenUpdateInput, ResetTokenUncheckedUpdateInput>
  }

  /**
   * ResetToken delete
   */
  export type ResetTokenDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResetToken
     */
    select?: ResetTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResetToken
     */
    omit?: ResetTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResetTokenInclude<ExtArgs> | null
    /**
     * Filter which ResetToken to delete.
     */
    where: ResetTokenWhereUniqueInput
  }

  /**
   * ResetToken deleteMany
   */
  export type ResetTokenDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ResetTokens to delete
     */
    where?: ResetTokenWhereInput
    /**
     * Limit how many ResetTokens to delete.
     */
    limit?: number
  }

  /**
   * ResetToken without action
   */
  export type ResetTokenDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResetToken
     */
    select?: ResetTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResetToken
     */
    omit?: ResetTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResetTokenInclude<ExtArgs> | null
  }


  /**
   * Model Taca
   */

  export type AggregateTaca = {
    _count: TacaCountAggregateOutputType | null
    _avg: TacaAvgAggregateOutputType | null
    _sum: TacaSumAggregateOutputType | null
    _min: TacaMinAggregateOutputType | null
    _max: TacaMaxAggregateOutputType | null
  }

  export type TacaAvgAggregateOutputType = {
    ano: number | null
  }

  export type TacaSumAggregateOutputType = {
    ano: number | null
  }

  export type TacaMinAggregateOutputType = {
    id: string | null
    userId: string | null
    nome: string | null
    ano: number | null
    jogo: $Enums.Game | null
    createdAt: Date | null
    titulo: string | null
  }

  export type TacaMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    nome: string | null
    ano: number | null
    jogo: $Enums.Game | null
    createdAt: Date | null
    titulo: string | null
  }

  export type TacaCountAggregateOutputType = {
    id: number
    userId: number
    nome: number
    ano: number
    jogo: number
    createdAt: number
    titulo: number
    _all: number
  }


  export type TacaAvgAggregateInputType = {
    ano?: true
  }

  export type TacaSumAggregateInputType = {
    ano?: true
  }

  export type TacaMinAggregateInputType = {
    id?: true
    userId?: true
    nome?: true
    ano?: true
    jogo?: true
    createdAt?: true
    titulo?: true
  }

  export type TacaMaxAggregateInputType = {
    id?: true
    userId?: true
    nome?: true
    ano?: true
    jogo?: true
    createdAt?: true
    titulo?: true
  }

  export type TacaCountAggregateInputType = {
    id?: true
    userId?: true
    nome?: true
    ano?: true
    jogo?: true
    createdAt?: true
    titulo?: true
    _all?: true
  }

  export type TacaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Taca to aggregate.
     */
    where?: TacaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tacas to fetch.
     */
    orderBy?: TacaOrderByWithRelationInput | TacaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TacaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tacas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tacas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tacas
    **/
    _count?: true | TacaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TacaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TacaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TacaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TacaMaxAggregateInputType
  }

  export type GetTacaAggregateType<T extends TacaAggregateArgs> = {
        [P in keyof T & keyof AggregateTaca]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTaca[P]>
      : GetScalarType<T[P], AggregateTaca[P]>
  }




  export type TacaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TacaWhereInput
    orderBy?: TacaOrderByWithAggregationInput | TacaOrderByWithAggregationInput[]
    by: TacaScalarFieldEnum[] | TacaScalarFieldEnum
    having?: TacaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TacaCountAggregateInputType | true
    _avg?: TacaAvgAggregateInputType
    _sum?: TacaSumAggregateInputType
    _min?: TacaMinAggregateInputType
    _max?: TacaMaxAggregateInputType
  }

  export type TacaGroupByOutputType = {
    id: string
    userId: string
    nome: string
    ano: number
    jogo: $Enums.Game
    createdAt: Date
    titulo: string
    _count: TacaCountAggregateOutputType | null
    _avg: TacaAvgAggregateOutputType | null
    _sum: TacaSumAggregateOutputType | null
    _min: TacaMinAggregateOutputType | null
    _max: TacaMaxAggregateOutputType | null
  }

  type GetTacaGroupByPayload<T extends TacaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TacaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TacaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TacaGroupByOutputType[P]>
            : GetScalarType<T[P], TacaGroupByOutputType[P]>
        }
      >
    >


  export type TacaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    nome?: boolean
    ano?: boolean
    jogo?: boolean
    createdAt?: boolean
    titulo?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["taca"]>

  export type TacaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    nome?: boolean
    ano?: boolean
    jogo?: boolean
    createdAt?: boolean
    titulo?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["taca"]>

  export type TacaSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    nome?: boolean
    ano?: boolean
    jogo?: boolean
    createdAt?: boolean
    titulo?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["taca"]>

  export type TacaSelectScalar = {
    id?: boolean
    userId?: boolean
    nome?: boolean
    ano?: boolean
    jogo?: boolean
    createdAt?: boolean
    titulo?: boolean
  }

  export type TacaOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "nome" | "ano" | "jogo" | "createdAt" | "titulo", ExtArgs["result"]["taca"]>
  export type TacaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type TacaIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type TacaIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $TacaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Taca"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      nome: string
      ano: number
      jogo: $Enums.Game
      createdAt: Date
      titulo: string
    }, ExtArgs["result"]["taca"]>
    composites: {}
  }

  type TacaGetPayload<S extends boolean | null | undefined | TacaDefaultArgs> = $Result.GetResult<Prisma.$TacaPayload, S>

  type TacaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TacaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TacaCountAggregateInputType | true
    }

  export interface TacaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Taca'], meta: { name: 'Taca' } }
    /**
     * Find zero or one Taca that matches the filter.
     * @param {TacaFindUniqueArgs} args - Arguments to find a Taca
     * @example
     * // Get one Taca
     * const taca = await prisma.taca.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TacaFindUniqueArgs>(args: SelectSubset<T, TacaFindUniqueArgs<ExtArgs>>): Prisma__TacaClient<$Result.GetResult<Prisma.$TacaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Taca that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TacaFindUniqueOrThrowArgs} args - Arguments to find a Taca
     * @example
     * // Get one Taca
     * const taca = await prisma.taca.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TacaFindUniqueOrThrowArgs>(args: SelectSubset<T, TacaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TacaClient<$Result.GetResult<Prisma.$TacaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Taca that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TacaFindFirstArgs} args - Arguments to find a Taca
     * @example
     * // Get one Taca
     * const taca = await prisma.taca.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TacaFindFirstArgs>(args?: SelectSubset<T, TacaFindFirstArgs<ExtArgs>>): Prisma__TacaClient<$Result.GetResult<Prisma.$TacaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Taca that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TacaFindFirstOrThrowArgs} args - Arguments to find a Taca
     * @example
     * // Get one Taca
     * const taca = await prisma.taca.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TacaFindFirstOrThrowArgs>(args?: SelectSubset<T, TacaFindFirstOrThrowArgs<ExtArgs>>): Prisma__TacaClient<$Result.GetResult<Prisma.$TacaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Tacas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TacaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tacas
     * const tacas = await prisma.taca.findMany()
     * 
     * // Get first 10 Tacas
     * const tacas = await prisma.taca.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tacaWithIdOnly = await prisma.taca.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TacaFindManyArgs>(args?: SelectSubset<T, TacaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TacaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Taca.
     * @param {TacaCreateArgs} args - Arguments to create a Taca.
     * @example
     * // Create one Taca
     * const Taca = await prisma.taca.create({
     *   data: {
     *     // ... data to create a Taca
     *   }
     * })
     * 
     */
    create<T extends TacaCreateArgs>(args: SelectSubset<T, TacaCreateArgs<ExtArgs>>): Prisma__TacaClient<$Result.GetResult<Prisma.$TacaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Tacas.
     * @param {TacaCreateManyArgs} args - Arguments to create many Tacas.
     * @example
     * // Create many Tacas
     * const taca = await prisma.taca.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TacaCreateManyArgs>(args?: SelectSubset<T, TacaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Tacas and returns the data saved in the database.
     * @param {TacaCreateManyAndReturnArgs} args - Arguments to create many Tacas.
     * @example
     * // Create many Tacas
     * const taca = await prisma.taca.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Tacas and only return the `id`
     * const tacaWithIdOnly = await prisma.taca.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TacaCreateManyAndReturnArgs>(args?: SelectSubset<T, TacaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TacaPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Taca.
     * @param {TacaDeleteArgs} args - Arguments to delete one Taca.
     * @example
     * // Delete one Taca
     * const Taca = await prisma.taca.delete({
     *   where: {
     *     // ... filter to delete one Taca
     *   }
     * })
     * 
     */
    delete<T extends TacaDeleteArgs>(args: SelectSubset<T, TacaDeleteArgs<ExtArgs>>): Prisma__TacaClient<$Result.GetResult<Prisma.$TacaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Taca.
     * @param {TacaUpdateArgs} args - Arguments to update one Taca.
     * @example
     * // Update one Taca
     * const taca = await prisma.taca.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TacaUpdateArgs>(args: SelectSubset<T, TacaUpdateArgs<ExtArgs>>): Prisma__TacaClient<$Result.GetResult<Prisma.$TacaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Tacas.
     * @param {TacaDeleteManyArgs} args - Arguments to filter Tacas to delete.
     * @example
     * // Delete a few Tacas
     * const { count } = await prisma.taca.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TacaDeleteManyArgs>(args?: SelectSubset<T, TacaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tacas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TacaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tacas
     * const taca = await prisma.taca.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TacaUpdateManyArgs>(args: SelectSubset<T, TacaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tacas and returns the data updated in the database.
     * @param {TacaUpdateManyAndReturnArgs} args - Arguments to update many Tacas.
     * @example
     * // Update many Tacas
     * const taca = await prisma.taca.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Tacas and only return the `id`
     * const tacaWithIdOnly = await prisma.taca.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TacaUpdateManyAndReturnArgs>(args: SelectSubset<T, TacaUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TacaPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Taca.
     * @param {TacaUpsertArgs} args - Arguments to update or create a Taca.
     * @example
     * // Update or create a Taca
     * const taca = await prisma.taca.upsert({
     *   create: {
     *     // ... data to create a Taca
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Taca we want to update
     *   }
     * })
     */
    upsert<T extends TacaUpsertArgs>(args: SelectSubset<T, TacaUpsertArgs<ExtArgs>>): Prisma__TacaClient<$Result.GetResult<Prisma.$TacaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Tacas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TacaCountArgs} args - Arguments to filter Tacas to count.
     * @example
     * // Count the number of Tacas
     * const count = await prisma.taca.count({
     *   where: {
     *     // ... the filter for the Tacas we want to count
     *   }
     * })
    **/
    count<T extends TacaCountArgs>(
      args?: Subset<T, TacaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TacaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Taca.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TacaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TacaAggregateArgs>(args: Subset<T, TacaAggregateArgs>): Prisma.PrismaPromise<GetTacaAggregateType<T>>

    /**
     * Group by Taca.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TacaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TacaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TacaGroupByArgs['orderBy'] }
        : { orderBy?: TacaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TacaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTacaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Taca model
   */
  readonly fields: TacaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Taca.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TacaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Taca model
   */
  interface TacaFieldRefs {
    readonly id: FieldRef<"Taca", 'String'>
    readonly userId: FieldRef<"Taca", 'String'>
    readonly nome: FieldRef<"Taca", 'String'>
    readonly ano: FieldRef<"Taca", 'Int'>
    readonly jogo: FieldRef<"Taca", 'Game'>
    readonly createdAt: FieldRef<"Taca", 'DateTime'>
    readonly titulo: FieldRef<"Taca", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Taca findUnique
   */
  export type TacaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Taca
     */
    select?: TacaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Taca
     */
    omit?: TacaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TacaInclude<ExtArgs> | null
    /**
     * Filter, which Taca to fetch.
     */
    where: TacaWhereUniqueInput
  }

  /**
   * Taca findUniqueOrThrow
   */
  export type TacaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Taca
     */
    select?: TacaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Taca
     */
    omit?: TacaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TacaInclude<ExtArgs> | null
    /**
     * Filter, which Taca to fetch.
     */
    where: TacaWhereUniqueInput
  }

  /**
   * Taca findFirst
   */
  export type TacaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Taca
     */
    select?: TacaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Taca
     */
    omit?: TacaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TacaInclude<ExtArgs> | null
    /**
     * Filter, which Taca to fetch.
     */
    where?: TacaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tacas to fetch.
     */
    orderBy?: TacaOrderByWithRelationInput | TacaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tacas.
     */
    cursor?: TacaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tacas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tacas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tacas.
     */
    distinct?: TacaScalarFieldEnum | TacaScalarFieldEnum[]
  }

  /**
   * Taca findFirstOrThrow
   */
  export type TacaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Taca
     */
    select?: TacaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Taca
     */
    omit?: TacaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TacaInclude<ExtArgs> | null
    /**
     * Filter, which Taca to fetch.
     */
    where?: TacaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tacas to fetch.
     */
    orderBy?: TacaOrderByWithRelationInput | TacaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tacas.
     */
    cursor?: TacaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tacas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tacas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tacas.
     */
    distinct?: TacaScalarFieldEnum | TacaScalarFieldEnum[]
  }

  /**
   * Taca findMany
   */
  export type TacaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Taca
     */
    select?: TacaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Taca
     */
    omit?: TacaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TacaInclude<ExtArgs> | null
    /**
     * Filter, which Tacas to fetch.
     */
    where?: TacaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tacas to fetch.
     */
    orderBy?: TacaOrderByWithRelationInput | TacaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tacas.
     */
    cursor?: TacaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tacas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tacas.
     */
    skip?: number
    distinct?: TacaScalarFieldEnum | TacaScalarFieldEnum[]
  }

  /**
   * Taca create
   */
  export type TacaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Taca
     */
    select?: TacaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Taca
     */
    omit?: TacaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TacaInclude<ExtArgs> | null
    /**
     * The data needed to create a Taca.
     */
    data: XOR<TacaCreateInput, TacaUncheckedCreateInput>
  }

  /**
   * Taca createMany
   */
  export type TacaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tacas.
     */
    data: TacaCreateManyInput | TacaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Taca createManyAndReturn
   */
  export type TacaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Taca
     */
    select?: TacaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Taca
     */
    omit?: TacaOmit<ExtArgs> | null
    /**
     * The data used to create many Tacas.
     */
    data: TacaCreateManyInput | TacaCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TacaIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Taca update
   */
  export type TacaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Taca
     */
    select?: TacaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Taca
     */
    omit?: TacaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TacaInclude<ExtArgs> | null
    /**
     * The data needed to update a Taca.
     */
    data: XOR<TacaUpdateInput, TacaUncheckedUpdateInput>
    /**
     * Choose, which Taca to update.
     */
    where: TacaWhereUniqueInput
  }

  /**
   * Taca updateMany
   */
  export type TacaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tacas.
     */
    data: XOR<TacaUpdateManyMutationInput, TacaUncheckedUpdateManyInput>
    /**
     * Filter which Tacas to update
     */
    where?: TacaWhereInput
    /**
     * Limit how many Tacas to update.
     */
    limit?: number
  }

  /**
   * Taca updateManyAndReturn
   */
  export type TacaUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Taca
     */
    select?: TacaSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Taca
     */
    omit?: TacaOmit<ExtArgs> | null
    /**
     * The data used to update Tacas.
     */
    data: XOR<TacaUpdateManyMutationInput, TacaUncheckedUpdateManyInput>
    /**
     * Filter which Tacas to update
     */
    where?: TacaWhereInput
    /**
     * Limit how many Tacas to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TacaIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Taca upsert
   */
  export type TacaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Taca
     */
    select?: TacaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Taca
     */
    omit?: TacaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TacaInclude<ExtArgs> | null
    /**
     * The filter to search for the Taca to update in case it exists.
     */
    where: TacaWhereUniqueInput
    /**
     * In case the Taca found by the `where` argument doesn't exist, create a new Taca with this data.
     */
    create: XOR<TacaCreateInput, TacaUncheckedCreateInput>
    /**
     * In case the Taca was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TacaUpdateInput, TacaUncheckedUpdateInput>
  }

  /**
   * Taca delete
   */
  export type TacaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Taca
     */
    select?: TacaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Taca
     */
    omit?: TacaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TacaInclude<ExtArgs> | null
    /**
     * Filter which Taca to delete.
     */
    where: TacaWhereUniqueInput
  }

  /**
   * Taca deleteMany
   */
  export type TacaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tacas to delete
     */
    where?: TacaWhereInput
    /**
     * Limit how many Tacas to delete.
     */
    limit?: number
  }

  /**
   * Taca without action
   */
  export type TacaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Taca
     */
    select?: TacaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Taca
     */
    omit?: TacaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TacaInclude<ExtArgs> | null
  }


  /**
   * Model Medalha
   */

  export type AggregateMedalha = {
    _count: MedalhaCountAggregateOutputType | null
    _avg: MedalhaAvgAggregateOutputType | null
    _sum: MedalhaSumAggregateOutputType | null
    _min: MedalhaMinAggregateOutputType | null
    _max: MedalhaMaxAggregateOutputType | null
  }

  export type MedalhaAvgAggregateOutputType = {
    ano: number | null
    mes: number | null
  }

  export type MedalhaSumAggregateOutputType = {
    ano: number | null
    mes: number | null
  }

  export type MedalhaMinAggregateOutputType = {
    id: string | null
    userId: string | null
    tipo: string | null
    ano: number | null
    jogo: $Enums.Game | null
    mes: number | null
    titulo: string | null
    createdAt: Date | null
  }

  export type MedalhaMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    tipo: string | null
    ano: number | null
    jogo: $Enums.Game | null
    mes: number | null
    titulo: string | null
    createdAt: Date | null
  }

  export type MedalhaCountAggregateOutputType = {
    id: number
    userId: number
    tipo: number
    ano: number
    jogo: number
    mes: number
    titulo: number
    createdAt: number
    _all: number
  }


  export type MedalhaAvgAggregateInputType = {
    ano?: true
    mes?: true
  }

  export type MedalhaSumAggregateInputType = {
    ano?: true
    mes?: true
  }

  export type MedalhaMinAggregateInputType = {
    id?: true
    userId?: true
    tipo?: true
    ano?: true
    jogo?: true
    mes?: true
    titulo?: true
    createdAt?: true
  }

  export type MedalhaMaxAggregateInputType = {
    id?: true
    userId?: true
    tipo?: true
    ano?: true
    jogo?: true
    mes?: true
    titulo?: true
    createdAt?: true
  }

  export type MedalhaCountAggregateInputType = {
    id?: true
    userId?: true
    tipo?: true
    ano?: true
    jogo?: true
    mes?: true
    titulo?: true
    createdAt?: true
    _all?: true
  }

  export type MedalhaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Medalha to aggregate.
     */
    where?: MedalhaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Medalhas to fetch.
     */
    orderBy?: MedalhaOrderByWithRelationInput | MedalhaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MedalhaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Medalhas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Medalhas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Medalhas
    **/
    _count?: true | MedalhaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MedalhaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MedalhaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MedalhaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MedalhaMaxAggregateInputType
  }

  export type GetMedalhaAggregateType<T extends MedalhaAggregateArgs> = {
        [P in keyof T & keyof AggregateMedalha]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMedalha[P]>
      : GetScalarType<T[P], AggregateMedalha[P]>
  }




  export type MedalhaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MedalhaWhereInput
    orderBy?: MedalhaOrderByWithAggregationInput | MedalhaOrderByWithAggregationInput[]
    by: MedalhaScalarFieldEnum[] | MedalhaScalarFieldEnum
    having?: MedalhaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MedalhaCountAggregateInputType | true
    _avg?: MedalhaAvgAggregateInputType
    _sum?: MedalhaSumAggregateInputType
    _min?: MedalhaMinAggregateInputType
    _max?: MedalhaMaxAggregateInputType
  }

  export type MedalhaGroupByOutputType = {
    id: string
    userId: string
    tipo: string
    ano: number
    jogo: $Enums.Game
    mes: number
    titulo: string
    createdAt: Date
    _count: MedalhaCountAggregateOutputType | null
    _avg: MedalhaAvgAggregateOutputType | null
    _sum: MedalhaSumAggregateOutputType | null
    _min: MedalhaMinAggregateOutputType | null
    _max: MedalhaMaxAggregateOutputType | null
  }

  type GetMedalhaGroupByPayload<T extends MedalhaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MedalhaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MedalhaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MedalhaGroupByOutputType[P]>
            : GetScalarType<T[P], MedalhaGroupByOutputType[P]>
        }
      >
    >


  export type MedalhaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    tipo?: boolean
    ano?: boolean
    jogo?: boolean
    mes?: boolean
    titulo?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["medalha"]>

  export type MedalhaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    tipo?: boolean
    ano?: boolean
    jogo?: boolean
    mes?: boolean
    titulo?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["medalha"]>

  export type MedalhaSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    tipo?: boolean
    ano?: boolean
    jogo?: boolean
    mes?: boolean
    titulo?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["medalha"]>

  export type MedalhaSelectScalar = {
    id?: boolean
    userId?: boolean
    tipo?: boolean
    ano?: boolean
    jogo?: boolean
    mes?: boolean
    titulo?: boolean
    createdAt?: boolean
  }

  export type MedalhaOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "tipo" | "ano" | "jogo" | "mes" | "titulo" | "createdAt", ExtArgs["result"]["medalha"]>
  export type MedalhaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type MedalhaIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type MedalhaIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $MedalhaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Medalha"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      tipo: string
      ano: number
      jogo: $Enums.Game
      mes: number
      titulo: string
      createdAt: Date
    }, ExtArgs["result"]["medalha"]>
    composites: {}
  }

  type MedalhaGetPayload<S extends boolean | null | undefined | MedalhaDefaultArgs> = $Result.GetResult<Prisma.$MedalhaPayload, S>

  type MedalhaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MedalhaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MedalhaCountAggregateInputType | true
    }

  export interface MedalhaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Medalha'], meta: { name: 'Medalha' } }
    /**
     * Find zero or one Medalha that matches the filter.
     * @param {MedalhaFindUniqueArgs} args - Arguments to find a Medalha
     * @example
     * // Get one Medalha
     * const medalha = await prisma.medalha.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MedalhaFindUniqueArgs>(args: SelectSubset<T, MedalhaFindUniqueArgs<ExtArgs>>): Prisma__MedalhaClient<$Result.GetResult<Prisma.$MedalhaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Medalha that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MedalhaFindUniqueOrThrowArgs} args - Arguments to find a Medalha
     * @example
     * // Get one Medalha
     * const medalha = await prisma.medalha.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MedalhaFindUniqueOrThrowArgs>(args: SelectSubset<T, MedalhaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MedalhaClient<$Result.GetResult<Prisma.$MedalhaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Medalha that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedalhaFindFirstArgs} args - Arguments to find a Medalha
     * @example
     * // Get one Medalha
     * const medalha = await prisma.medalha.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MedalhaFindFirstArgs>(args?: SelectSubset<T, MedalhaFindFirstArgs<ExtArgs>>): Prisma__MedalhaClient<$Result.GetResult<Prisma.$MedalhaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Medalha that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedalhaFindFirstOrThrowArgs} args - Arguments to find a Medalha
     * @example
     * // Get one Medalha
     * const medalha = await prisma.medalha.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MedalhaFindFirstOrThrowArgs>(args?: SelectSubset<T, MedalhaFindFirstOrThrowArgs<ExtArgs>>): Prisma__MedalhaClient<$Result.GetResult<Prisma.$MedalhaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Medalhas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedalhaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Medalhas
     * const medalhas = await prisma.medalha.findMany()
     * 
     * // Get first 10 Medalhas
     * const medalhas = await prisma.medalha.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const medalhaWithIdOnly = await prisma.medalha.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MedalhaFindManyArgs>(args?: SelectSubset<T, MedalhaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MedalhaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Medalha.
     * @param {MedalhaCreateArgs} args - Arguments to create a Medalha.
     * @example
     * // Create one Medalha
     * const Medalha = await prisma.medalha.create({
     *   data: {
     *     // ... data to create a Medalha
     *   }
     * })
     * 
     */
    create<T extends MedalhaCreateArgs>(args: SelectSubset<T, MedalhaCreateArgs<ExtArgs>>): Prisma__MedalhaClient<$Result.GetResult<Prisma.$MedalhaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Medalhas.
     * @param {MedalhaCreateManyArgs} args - Arguments to create many Medalhas.
     * @example
     * // Create many Medalhas
     * const medalha = await prisma.medalha.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MedalhaCreateManyArgs>(args?: SelectSubset<T, MedalhaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Medalhas and returns the data saved in the database.
     * @param {MedalhaCreateManyAndReturnArgs} args - Arguments to create many Medalhas.
     * @example
     * // Create many Medalhas
     * const medalha = await prisma.medalha.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Medalhas and only return the `id`
     * const medalhaWithIdOnly = await prisma.medalha.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MedalhaCreateManyAndReturnArgs>(args?: SelectSubset<T, MedalhaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MedalhaPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Medalha.
     * @param {MedalhaDeleteArgs} args - Arguments to delete one Medalha.
     * @example
     * // Delete one Medalha
     * const Medalha = await prisma.medalha.delete({
     *   where: {
     *     // ... filter to delete one Medalha
     *   }
     * })
     * 
     */
    delete<T extends MedalhaDeleteArgs>(args: SelectSubset<T, MedalhaDeleteArgs<ExtArgs>>): Prisma__MedalhaClient<$Result.GetResult<Prisma.$MedalhaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Medalha.
     * @param {MedalhaUpdateArgs} args - Arguments to update one Medalha.
     * @example
     * // Update one Medalha
     * const medalha = await prisma.medalha.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MedalhaUpdateArgs>(args: SelectSubset<T, MedalhaUpdateArgs<ExtArgs>>): Prisma__MedalhaClient<$Result.GetResult<Prisma.$MedalhaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Medalhas.
     * @param {MedalhaDeleteManyArgs} args - Arguments to filter Medalhas to delete.
     * @example
     * // Delete a few Medalhas
     * const { count } = await prisma.medalha.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MedalhaDeleteManyArgs>(args?: SelectSubset<T, MedalhaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Medalhas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedalhaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Medalhas
     * const medalha = await prisma.medalha.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MedalhaUpdateManyArgs>(args: SelectSubset<T, MedalhaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Medalhas and returns the data updated in the database.
     * @param {MedalhaUpdateManyAndReturnArgs} args - Arguments to update many Medalhas.
     * @example
     * // Update many Medalhas
     * const medalha = await prisma.medalha.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Medalhas and only return the `id`
     * const medalhaWithIdOnly = await prisma.medalha.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MedalhaUpdateManyAndReturnArgs>(args: SelectSubset<T, MedalhaUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MedalhaPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Medalha.
     * @param {MedalhaUpsertArgs} args - Arguments to update or create a Medalha.
     * @example
     * // Update or create a Medalha
     * const medalha = await prisma.medalha.upsert({
     *   create: {
     *     // ... data to create a Medalha
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Medalha we want to update
     *   }
     * })
     */
    upsert<T extends MedalhaUpsertArgs>(args: SelectSubset<T, MedalhaUpsertArgs<ExtArgs>>): Prisma__MedalhaClient<$Result.GetResult<Prisma.$MedalhaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Medalhas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedalhaCountArgs} args - Arguments to filter Medalhas to count.
     * @example
     * // Count the number of Medalhas
     * const count = await prisma.medalha.count({
     *   where: {
     *     // ... the filter for the Medalhas we want to count
     *   }
     * })
    **/
    count<T extends MedalhaCountArgs>(
      args?: Subset<T, MedalhaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MedalhaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Medalha.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedalhaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MedalhaAggregateArgs>(args: Subset<T, MedalhaAggregateArgs>): Prisma.PrismaPromise<GetMedalhaAggregateType<T>>

    /**
     * Group by Medalha.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedalhaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MedalhaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MedalhaGroupByArgs['orderBy'] }
        : { orderBy?: MedalhaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MedalhaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMedalhaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Medalha model
   */
  readonly fields: MedalhaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Medalha.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MedalhaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Medalha model
   */
  interface MedalhaFieldRefs {
    readonly id: FieldRef<"Medalha", 'String'>
    readonly userId: FieldRef<"Medalha", 'String'>
    readonly tipo: FieldRef<"Medalha", 'String'>
    readonly ano: FieldRef<"Medalha", 'Int'>
    readonly jogo: FieldRef<"Medalha", 'Game'>
    readonly mes: FieldRef<"Medalha", 'Int'>
    readonly titulo: FieldRef<"Medalha", 'String'>
    readonly createdAt: FieldRef<"Medalha", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Medalha findUnique
   */
  export type MedalhaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medalha
     */
    select?: MedalhaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Medalha
     */
    omit?: MedalhaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedalhaInclude<ExtArgs> | null
    /**
     * Filter, which Medalha to fetch.
     */
    where: MedalhaWhereUniqueInput
  }

  /**
   * Medalha findUniqueOrThrow
   */
  export type MedalhaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medalha
     */
    select?: MedalhaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Medalha
     */
    omit?: MedalhaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedalhaInclude<ExtArgs> | null
    /**
     * Filter, which Medalha to fetch.
     */
    where: MedalhaWhereUniqueInput
  }

  /**
   * Medalha findFirst
   */
  export type MedalhaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medalha
     */
    select?: MedalhaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Medalha
     */
    omit?: MedalhaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedalhaInclude<ExtArgs> | null
    /**
     * Filter, which Medalha to fetch.
     */
    where?: MedalhaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Medalhas to fetch.
     */
    orderBy?: MedalhaOrderByWithRelationInput | MedalhaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Medalhas.
     */
    cursor?: MedalhaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Medalhas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Medalhas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Medalhas.
     */
    distinct?: MedalhaScalarFieldEnum | MedalhaScalarFieldEnum[]
  }

  /**
   * Medalha findFirstOrThrow
   */
  export type MedalhaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medalha
     */
    select?: MedalhaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Medalha
     */
    omit?: MedalhaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedalhaInclude<ExtArgs> | null
    /**
     * Filter, which Medalha to fetch.
     */
    where?: MedalhaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Medalhas to fetch.
     */
    orderBy?: MedalhaOrderByWithRelationInput | MedalhaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Medalhas.
     */
    cursor?: MedalhaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Medalhas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Medalhas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Medalhas.
     */
    distinct?: MedalhaScalarFieldEnum | MedalhaScalarFieldEnum[]
  }

  /**
   * Medalha findMany
   */
  export type MedalhaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medalha
     */
    select?: MedalhaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Medalha
     */
    omit?: MedalhaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedalhaInclude<ExtArgs> | null
    /**
     * Filter, which Medalhas to fetch.
     */
    where?: MedalhaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Medalhas to fetch.
     */
    orderBy?: MedalhaOrderByWithRelationInput | MedalhaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Medalhas.
     */
    cursor?: MedalhaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Medalhas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Medalhas.
     */
    skip?: number
    distinct?: MedalhaScalarFieldEnum | MedalhaScalarFieldEnum[]
  }

  /**
   * Medalha create
   */
  export type MedalhaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medalha
     */
    select?: MedalhaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Medalha
     */
    omit?: MedalhaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedalhaInclude<ExtArgs> | null
    /**
     * The data needed to create a Medalha.
     */
    data: XOR<MedalhaCreateInput, MedalhaUncheckedCreateInput>
  }

  /**
   * Medalha createMany
   */
  export type MedalhaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Medalhas.
     */
    data: MedalhaCreateManyInput | MedalhaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Medalha createManyAndReturn
   */
  export type MedalhaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medalha
     */
    select?: MedalhaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Medalha
     */
    omit?: MedalhaOmit<ExtArgs> | null
    /**
     * The data used to create many Medalhas.
     */
    data: MedalhaCreateManyInput | MedalhaCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedalhaIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Medalha update
   */
  export type MedalhaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medalha
     */
    select?: MedalhaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Medalha
     */
    omit?: MedalhaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedalhaInclude<ExtArgs> | null
    /**
     * The data needed to update a Medalha.
     */
    data: XOR<MedalhaUpdateInput, MedalhaUncheckedUpdateInput>
    /**
     * Choose, which Medalha to update.
     */
    where: MedalhaWhereUniqueInput
  }

  /**
   * Medalha updateMany
   */
  export type MedalhaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Medalhas.
     */
    data: XOR<MedalhaUpdateManyMutationInput, MedalhaUncheckedUpdateManyInput>
    /**
     * Filter which Medalhas to update
     */
    where?: MedalhaWhereInput
    /**
     * Limit how many Medalhas to update.
     */
    limit?: number
  }

  /**
   * Medalha updateManyAndReturn
   */
  export type MedalhaUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medalha
     */
    select?: MedalhaSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Medalha
     */
    omit?: MedalhaOmit<ExtArgs> | null
    /**
     * The data used to update Medalhas.
     */
    data: XOR<MedalhaUpdateManyMutationInput, MedalhaUncheckedUpdateManyInput>
    /**
     * Filter which Medalhas to update
     */
    where?: MedalhaWhereInput
    /**
     * Limit how many Medalhas to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedalhaIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Medalha upsert
   */
  export type MedalhaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medalha
     */
    select?: MedalhaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Medalha
     */
    omit?: MedalhaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedalhaInclude<ExtArgs> | null
    /**
     * The filter to search for the Medalha to update in case it exists.
     */
    where: MedalhaWhereUniqueInput
    /**
     * In case the Medalha found by the `where` argument doesn't exist, create a new Medalha with this data.
     */
    create: XOR<MedalhaCreateInput, MedalhaUncheckedCreateInput>
    /**
     * In case the Medalha was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MedalhaUpdateInput, MedalhaUncheckedUpdateInput>
  }

  /**
   * Medalha delete
   */
  export type MedalhaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medalha
     */
    select?: MedalhaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Medalha
     */
    omit?: MedalhaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedalhaInclude<ExtArgs> | null
    /**
     * Filter which Medalha to delete.
     */
    where: MedalhaWhereUniqueInput
  }

  /**
   * Medalha deleteMany
   */
  export type MedalhaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Medalhas to delete
     */
    where?: MedalhaWhereInput
    /**
     * Limit how many Medalhas to delete.
     */
    limit?: number
  }

  /**
   * Medalha without action
   */
  export type MedalhaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medalha
     */
    select?: MedalhaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Medalha
     */
    omit?: MedalhaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedalhaInclude<ExtArgs> | null
  }


  /**
   * Model Trofeu
   */

  export type AggregateTrofeu = {
    _count: TrofeuCountAggregateOutputType | null
    _min: TrofeuMinAggregateOutputType | null
    _max: TrofeuMaxAggregateOutputType | null
  }

  export type TrofeuMinAggregateOutputType = {
    id: string | null
    userId: string | null
    nome: string | null
    descricao: string | null
    tipo: string | null
    titulo: string | null
    imagem: string | null
  }

  export type TrofeuMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    nome: string | null
    descricao: string | null
    tipo: string | null
    titulo: string | null
    imagem: string | null
  }

  export type TrofeuCountAggregateOutputType = {
    id: number
    userId: number
    nome: number
    descricao: number
    tipo: number
    titulo: number
    imagem: number
    _all: number
  }


  export type TrofeuMinAggregateInputType = {
    id?: true
    userId?: true
    nome?: true
    descricao?: true
    tipo?: true
    titulo?: true
    imagem?: true
  }

  export type TrofeuMaxAggregateInputType = {
    id?: true
    userId?: true
    nome?: true
    descricao?: true
    tipo?: true
    titulo?: true
    imagem?: true
  }

  export type TrofeuCountAggregateInputType = {
    id?: true
    userId?: true
    nome?: true
    descricao?: true
    tipo?: true
    titulo?: true
    imagem?: true
    _all?: true
  }

  export type TrofeuAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Trofeu to aggregate.
     */
    where?: TrofeuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Trofeus to fetch.
     */
    orderBy?: TrofeuOrderByWithRelationInput | TrofeuOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TrofeuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Trofeus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Trofeus.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Trofeus
    **/
    _count?: true | TrofeuCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TrofeuMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TrofeuMaxAggregateInputType
  }

  export type GetTrofeuAggregateType<T extends TrofeuAggregateArgs> = {
        [P in keyof T & keyof AggregateTrofeu]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTrofeu[P]>
      : GetScalarType<T[P], AggregateTrofeu[P]>
  }




  export type TrofeuGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TrofeuWhereInput
    orderBy?: TrofeuOrderByWithAggregationInput | TrofeuOrderByWithAggregationInput[]
    by: TrofeuScalarFieldEnum[] | TrofeuScalarFieldEnum
    having?: TrofeuScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TrofeuCountAggregateInputType | true
    _min?: TrofeuMinAggregateInputType
    _max?: TrofeuMaxAggregateInputType
  }

  export type TrofeuGroupByOutputType = {
    id: string
    userId: string
    nome: string
    descricao: string
    tipo: string
    titulo: string
    imagem: string
    _count: TrofeuCountAggregateOutputType | null
    _min: TrofeuMinAggregateOutputType | null
    _max: TrofeuMaxAggregateOutputType | null
  }

  type GetTrofeuGroupByPayload<T extends TrofeuGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TrofeuGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TrofeuGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TrofeuGroupByOutputType[P]>
            : GetScalarType<T[P], TrofeuGroupByOutputType[P]>
        }
      >
    >


  export type TrofeuSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    nome?: boolean
    descricao?: boolean
    tipo?: boolean
    titulo?: boolean
    imagem?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["trofeu"]>

  export type TrofeuSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    nome?: boolean
    descricao?: boolean
    tipo?: boolean
    titulo?: boolean
    imagem?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["trofeu"]>

  export type TrofeuSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    nome?: boolean
    descricao?: boolean
    tipo?: boolean
    titulo?: boolean
    imagem?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["trofeu"]>

  export type TrofeuSelectScalar = {
    id?: boolean
    userId?: boolean
    nome?: boolean
    descricao?: boolean
    tipo?: boolean
    titulo?: boolean
    imagem?: boolean
  }

  export type TrofeuOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "nome" | "descricao" | "tipo" | "titulo" | "imagem", ExtArgs["result"]["trofeu"]>
  export type TrofeuInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type TrofeuIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type TrofeuIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $TrofeuPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Trofeu"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      nome: string
      descricao: string
      tipo: string
      titulo: string
      imagem: string
    }, ExtArgs["result"]["trofeu"]>
    composites: {}
  }

  type TrofeuGetPayload<S extends boolean | null | undefined | TrofeuDefaultArgs> = $Result.GetResult<Prisma.$TrofeuPayload, S>

  type TrofeuCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TrofeuFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TrofeuCountAggregateInputType | true
    }

  export interface TrofeuDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Trofeu'], meta: { name: 'Trofeu' } }
    /**
     * Find zero or one Trofeu that matches the filter.
     * @param {TrofeuFindUniqueArgs} args - Arguments to find a Trofeu
     * @example
     * // Get one Trofeu
     * const trofeu = await prisma.trofeu.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TrofeuFindUniqueArgs>(args: SelectSubset<T, TrofeuFindUniqueArgs<ExtArgs>>): Prisma__TrofeuClient<$Result.GetResult<Prisma.$TrofeuPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Trofeu that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TrofeuFindUniqueOrThrowArgs} args - Arguments to find a Trofeu
     * @example
     * // Get one Trofeu
     * const trofeu = await prisma.trofeu.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TrofeuFindUniqueOrThrowArgs>(args: SelectSubset<T, TrofeuFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TrofeuClient<$Result.GetResult<Prisma.$TrofeuPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Trofeu that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrofeuFindFirstArgs} args - Arguments to find a Trofeu
     * @example
     * // Get one Trofeu
     * const trofeu = await prisma.trofeu.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TrofeuFindFirstArgs>(args?: SelectSubset<T, TrofeuFindFirstArgs<ExtArgs>>): Prisma__TrofeuClient<$Result.GetResult<Prisma.$TrofeuPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Trofeu that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrofeuFindFirstOrThrowArgs} args - Arguments to find a Trofeu
     * @example
     * // Get one Trofeu
     * const trofeu = await prisma.trofeu.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TrofeuFindFirstOrThrowArgs>(args?: SelectSubset<T, TrofeuFindFirstOrThrowArgs<ExtArgs>>): Prisma__TrofeuClient<$Result.GetResult<Prisma.$TrofeuPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Trofeus that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrofeuFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Trofeus
     * const trofeus = await prisma.trofeu.findMany()
     * 
     * // Get first 10 Trofeus
     * const trofeus = await prisma.trofeu.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const trofeuWithIdOnly = await prisma.trofeu.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TrofeuFindManyArgs>(args?: SelectSubset<T, TrofeuFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TrofeuPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Trofeu.
     * @param {TrofeuCreateArgs} args - Arguments to create a Trofeu.
     * @example
     * // Create one Trofeu
     * const Trofeu = await prisma.trofeu.create({
     *   data: {
     *     // ... data to create a Trofeu
     *   }
     * })
     * 
     */
    create<T extends TrofeuCreateArgs>(args: SelectSubset<T, TrofeuCreateArgs<ExtArgs>>): Prisma__TrofeuClient<$Result.GetResult<Prisma.$TrofeuPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Trofeus.
     * @param {TrofeuCreateManyArgs} args - Arguments to create many Trofeus.
     * @example
     * // Create many Trofeus
     * const trofeu = await prisma.trofeu.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TrofeuCreateManyArgs>(args?: SelectSubset<T, TrofeuCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Trofeus and returns the data saved in the database.
     * @param {TrofeuCreateManyAndReturnArgs} args - Arguments to create many Trofeus.
     * @example
     * // Create many Trofeus
     * const trofeu = await prisma.trofeu.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Trofeus and only return the `id`
     * const trofeuWithIdOnly = await prisma.trofeu.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TrofeuCreateManyAndReturnArgs>(args?: SelectSubset<T, TrofeuCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TrofeuPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Trofeu.
     * @param {TrofeuDeleteArgs} args - Arguments to delete one Trofeu.
     * @example
     * // Delete one Trofeu
     * const Trofeu = await prisma.trofeu.delete({
     *   where: {
     *     // ... filter to delete one Trofeu
     *   }
     * })
     * 
     */
    delete<T extends TrofeuDeleteArgs>(args: SelectSubset<T, TrofeuDeleteArgs<ExtArgs>>): Prisma__TrofeuClient<$Result.GetResult<Prisma.$TrofeuPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Trofeu.
     * @param {TrofeuUpdateArgs} args - Arguments to update one Trofeu.
     * @example
     * // Update one Trofeu
     * const trofeu = await prisma.trofeu.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TrofeuUpdateArgs>(args: SelectSubset<T, TrofeuUpdateArgs<ExtArgs>>): Prisma__TrofeuClient<$Result.GetResult<Prisma.$TrofeuPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Trofeus.
     * @param {TrofeuDeleteManyArgs} args - Arguments to filter Trofeus to delete.
     * @example
     * // Delete a few Trofeus
     * const { count } = await prisma.trofeu.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TrofeuDeleteManyArgs>(args?: SelectSubset<T, TrofeuDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Trofeus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrofeuUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Trofeus
     * const trofeu = await prisma.trofeu.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TrofeuUpdateManyArgs>(args: SelectSubset<T, TrofeuUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Trofeus and returns the data updated in the database.
     * @param {TrofeuUpdateManyAndReturnArgs} args - Arguments to update many Trofeus.
     * @example
     * // Update many Trofeus
     * const trofeu = await prisma.trofeu.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Trofeus and only return the `id`
     * const trofeuWithIdOnly = await prisma.trofeu.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TrofeuUpdateManyAndReturnArgs>(args: SelectSubset<T, TrofeuUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TrofeuPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Trofeu.
     * @param {TrofeuUpsertArgs} args - Arguments to update or create a Trofeu.
     * @example
     * // Update or create a Trofeu
     * const trofeu = await prisma.trofeu.upsert({
     *   create: {
     *     // ... data to create a Trofeu
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Trofeu we want to update
     *   }
     * })
     */
    upsert<T extends TrofeuUpsertArgs>(args: SelectSubset<T, TrofeuUpsertArgs<ExtArgs>>): Prisma__TrofeuClient<$Result.GetResult<Prisma.$TrofeuPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Trofeus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrofeuCountArgs} args - Arguments to filter Trofeus to count.
     * @example
     * // Count the number of Trofeus
     * const count = await prisma.trofeu.count({
     *   where: {
     *     // ... the filter for the Trofeus we want to count
     *   }
     * })
    **/
    count<T extends TrofeuCountArgs>(
      args?: Subset<T, TrofeuCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TrofeuCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Trofeu.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrofeuAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TrofeuAggregateArgs>(args: Subset<T, TrofeuAggregateArgs>): Prisma.PrismaPromise<GetTrofeuAggregateType<T>>

    /**
     * Group by Trofeu.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrofeuGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TrofeuGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TrofeuGroupByArgs['orderBy'] }
        : { orderBy?: TrofeuGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TrofeuGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTrofeuGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Trofeu model
   */
  readonly fields: TrofeuFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Trofeu.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TrofeuClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Trofeu model
   */
  interface TrofeuFieldRefs {
    readonly id: FieldRef<"Trofeu", 'String'>
    readonly userId: FieldRef<"Trofeu", 'String'>
    readonly nome: FieldRef<"Trofeu", 'String'>
    readonly descricao: FieldRef<"Trofeu", 'String'>
    readonly tipo: FieldRef<"Trofeu", 'String'>
    readonly titulo: FieldRef<"Trofeu", 'String'>
    readonly imagem: FieldRef<"Trofeu", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Trofeu findUnique
   */
  export type TrofeuFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trofeu
     */
    select?: TrofeuSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Trofeu
     */
    omit?: TrofeuOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrofeuInclude<ExtArgs> | null
    /**
     * Filter, which Trofeu to fetch.
     */
    where: TrofeuWhereUniqueInput
  }

  /**
   * Trofeu findUniqueOrThrow
   */
  export type TrofeuFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trofeu
     */
    select?: TrofeuSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Trofeu
     */
    omit?: TrofeuOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrofeuInclude<ExtArgs> | null
    /**
     * Filter, which Trofeu to fetch.
     */
    where: TrofeuWhereUniqueInput
  }

  /**
   * Trofeu findFirst
   */
  export type TrofeuFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trofeu
     */
    select?: TrofeuSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Trofeu
     */
    omit?: TrofeuOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrofeuInclude<ExtArgs> | null
    /**
     * Filter, which Trofeu to fetch.
     */
    where?: TrofeuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Trofeus to fetch.
     */
    orderBy?: TrofeuOrderByWithRelationInput | TrofeuOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Trofeus.
     */
    cursor?: TrofeuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Trofeus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Trofeus.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Trofeus.
     */
    distinct?: TrofeuScalarFieldEnum | TrofeuScalarFieldEnum[]
  }

  /**
   * Trofeu findFirstOrThrow
   */
  export type TrofeuFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trofeu
     */
    select?: TrofeuSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Trofeu
     */
    omit?: TrofeuOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrofeuInclude<ExtArgs> | null
    /**
     * Filter, which Trofeu to fetch.
     */
    where?: TrofeuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Trofeus to fetch.
     */
    orderBy?: TrofeuOrderByWithRelationInput | TrofeuOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Trofeus.
     */
    cursor?: TrofeuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Trofeus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Trofeus.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Trofeus.
     */
    distinct?: TrofeuScalarFieldEnum | TrofeuScalarFieldEnum[]
  }

  /**
   * Trofeu findMany
   */
  export type TrofeuFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trofeu
     */
    select?: TrofeuSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Trofeu
     */
    omit?: TrofeuOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrofeuInclude<ExtArgs> | null
    /**
     * Filter, which Trofeus to fetch.
     */
    where?: TrofeuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Trofeus to fetch.
     */
    orderBy?: TrofeuOrderByWithRelationInput | TrofeuOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Trofeus.
     */
    cursor?: TrofeuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Trofeus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Trofeus.
     */
    skip?: number
    distinct?: TrofeuScalarFieldEnum | TrofeuScalarFieldEnum[]
  }

  /**
   * Trofeu create
   */
  export type TrofeuCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trofeu
     */
    select?: TrofeuSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Trofeu
     */
    omit?: TrofeuOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrofeuInclude<ExtArgs> | null
    /**
     * The data needed to create a Trofeu.
     */
    data: XOR<TrofeuCreateInput, TrofeuUncheckedCreateInput>
  }

  /**
   * Trofeu createMany
   */
  export type TrofeuCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Trofeus.
     */
    data: TrofeuCreateManyInput | TrofeuCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Trofeu createManyAndReturn
   */
  export type TrofeuCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trofeu
     */
    select?: TrofeuSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Trofeu
     */
    omit?: TrofeuOmit<ExtArgs> | null
    /**
     * The data used to create many Trofeus.
     */
    data: TrofeuCreateManyInput | TrofeuCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrofeuIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Trofeu update
   */
  export type TrofeuUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trofeu
     */
    select?: TrofeuSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Trofeu
     */
    omit?: TrofeuOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrofeuInclude<ExtArgs> | null
    /**
     * The data needed to update a Trofeu.
     */
    data: XOR<TrofeuUpdateInput, TrofeuUncheckedUpdateInput>
    /**
     * Choose, which Trofeu to update.
     */
    where: TrofeuWhereUniqueInput
  }

  /**
   * Trofeu updateMany
   */
  export type TrofeuUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Trofeus.
     */
    data: XOR<TrofeuUpdateManyMutationInput, TrofeuUncheckedUpdateManyInput>
    /**
     * Filter which Trofeus to update
     */
    where?: TrofeuWhereInput
    /**
     * Limit how many Trofeus to update.
     */
    limit?: number
  }

  /**
   * Trofeu updateManyAndReturn
   */
  export type TrofeuUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trofeu
     */
    select?: TrofeuSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Trofeu
     */
    omit?: TrofeuOmit<ExtArgs> | null
    /**
     * The data used to update Trofeus.
     */
    data: XOR<TrofeuUpdateManyMutationInput, TrofeuUncheckedUpdateManyInput>
    /**
     * Filter which Trofeus to update
     */
    where?: TrofeuWhereInput
    /**
     * Limit how many Trofeus to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrofeuIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Trofeu upsert
   */
  export type TrofeuUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trofeu
     */
    select?: TrofeuSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Trofeu
     */
    omit?: TrofeuOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrofeuInclude<ExtArgs> | null
    /**
     * The filter to search for the Trofeu to update in case it exists.
     */
    where: TrofeuWhereUniqueInput
    /**
     * In case the Trofeu found by the `where` argument doesn't exist, create a new Trofeu with this data.
     */
    create: XOR<TrofeuCreateInput, TrofeuUncheckedCreateInput>
    /**
     * In case the Trofeu was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TrofeuUpdateInput, TrofeuUncheckedUpdateInput>
  }

  /**
   * Trofeu delete
   */
  export type TrofeuDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trofeu
     */
    select?: TrofeuSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Trofeu
     */
    omit?: TrofeuOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrofeuInclude<ExtArgs> | null
    /**
     * Filter which Trofeu to delete.
     */
    where: TrofeuWhereUniqueInput
  }

  /**
   * Trofeu deleteMany
   */
  export type TrofeuDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Trofeus to delete
     */
    where?: TrofeuWhereInput
    /**
     * Limit how many Trofeus to delete.
     */
    limit?: number
  }

  /**
   * Trofeu without action
   */
  export type TrofeuDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trofeu
     */
    select?: TrofeuSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Trofeu
     */
    omit?: TrofeuOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrofeuInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    password: 'password',
    role: 'role',
    isApproved: 'isApproved',
    createdAt: 'createdAt',
    avatar: 'avatar',
    socials: 'socials'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const SessionScalarFieldEnum: {
    id: 'id',
    token: 'token',
    userId: 'userId',
    expires: 'expires',
    createdAt: 'createdAt'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const ViagemScalarFieldEnum: {
    id: 'id',
    motoristaId: 'motoristaId',
    camiao: 'camiao',
    origem: 'origem',
    destino: 'destino',
    distancia: 'distancia',
    dano: 'dano',
    velocidadeMax: 'velocidadeMax',
    hora: 'hora',
    data: 'data',
    game: 'game',
    carga: 'carga',
    lucro: 'lucro'
  };

  export type ViagemScalarFieldEnum = (typeof ViagemScalarFieldEnum)[keyof typeof ViagemScalarFieldEnum]


  export const ResetTokenScalarFieldEnum: {
    token: 'token',
    userId: 'userId',
    expires: 'expires',
    createdAt: 'createdAt'
  };

  export type ResetTokenScalarFieldEnum = (typeof ResetTokenScalarFieldEnum)[keyof typeof ResetTokenScalarFieldEnum]


  export const TacaScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    nome: 'nome',
    ano: 'ano',
    jogo: 'jogo',
    createdAt: 'createdAt',
    titulo: 'titulo'
  };

  export type TacaScalarFieldEnum = (typeof TacaScalarFieldEnum)[keyof typeof TacaScalarFieldEnum]


  export const MedalhaScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    tipo: 'tipo',
    ano: 'ano',
    jogo: 'jogo',
    mes: 'mes',
    titulo: 'titulo',
    createdAt: 'createdAt'
  };

  export type MedalhaScalarFieldEnum = (typeof MedalhaScalarFieldEnum)[keyof typeof MedalhaScalarFieldEnum]


  export const TrofeuScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    nome: 'nome',
    descricao: 'descricao',
    tipo: 'tipo',
    titulo: 'titulo',
    imagem: 'imagem'
  };

  export type TrofeuScalarFieldEnum = (typeof TrofeuScalarFieldEnum)[keyof typeof TrofeuScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'Role[]'
   */
  export type ListEnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Game'
   */
  export type EnumGameFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Game'>
    


  /**
   * Reference to a field of type 'Game[]'
   */
  export type ListEnumGameFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Game[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    isApproved?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    avatar?: StringNullableFilter<"User"> | string | null
    socials?: JsonNullableFilter<"User">
    medalhas?: MedalhaListRelationFilter
    resettokens?: XOR<ResetTokenNullableScalarRelationFilter, ResetTokenWhereInput> | null
    sessions?: XOR<SessionNullableScalarRelationFilter, SessionWhereInput> | null
    tacas?: TacaListRelationFilter
    trofeus?: TrofeuListRelationFilter
    viagens?: ViagemListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    isApproved?: SortOrder
    createdAt?: SortOrder
    avatar?: SortOrderInput | SortOrder
    socials?: SortOrderInput | SortOrder
    medalhas?: MedalhaOrderByRelationAggregateInput
    resettokens?: ResetTokenOrderByWithRelationInput
    sessions?: SessionOrderByWithRelationInput
    tacas?: TacaOrderByRelationAggregateInput
    trofeus?: TrofeuOrderByRelationAggregateInput
    viagens?: ViagemOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    isApproved?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    avatar?: StringNullableFilter<"User"> | string | null
    socials?: JsonNullableFilter<"User">
    medalhas?: MedalhaListRelationFilter
    resettokens?: XOR<ResetTokenNullableScalarRelationFilter, ResetTokenWhereInput> | null
    sessions?: XOR<SessionNullableScalarRelationFilter, SessionWhereInput> | null
    tacas?: TacaListRelationFilter
    trofeus?: TrofeuListRelationFilter
    viagens?: ViagemListRelationFilter
  }, "id" | "name" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    isApproved?: SortOrder
    createdAt?: SortOrder
    avatar?: SortOrderInput | SortOrder
    socials?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    name?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    role?: EnumRoleWithAggregatesFilter<"User"> | $Enums.Role
    isApproved?: BoolWithAggregatesFilter<"User"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    avatar?: StringNullableWithAggregatesFilter<"User"> | string | null
    socials?: JsonNullableWithAggregatesFilter<"User">
  }

  export type SessionWhereInput = {
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    id?: StringFilter<"Session"> | string
    token?: StringFilter<"Session"> | string
    userId?: StringFilter<"Session"> | string
    expires?: DateTimeFilter<"Session"> | Date | string
    createdAt?: DateTimeFilter<"Session"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type SessionOrderByWithRelationInput = {
    id?: SortOrder
    token?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type SessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    token?: string
    userId?: string
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    expires?: DateTimeFilter<"Session"> | Date | string
    createdAt?: DateTimeFilter<"Session"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "token" | "userId">

  export type SessionOrderByWithAggregationInput = {
    id?: SortOrder
    token?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    createdAt?: SortOrder
    _count?: SessionCountOrderByAggregateInput
    _max?: SessionMaxOrderByAggregateInput
    _min?: SessionMinOrderByAggregateInput
  }

  export type SessionScalarWhereWithAggregatesInput = {
    AND?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    OR?: SessionScalarWhereWithAggregatesInput[]
    NOT?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Session"> | string
    token?: StringWithAggregatesFilter<"Session"> | string
    userId?: StringWithAggregatesFilter<"Session"> | string
    expires?: DateTimeWithAggregatesFilter<"Session"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"Session"> | Date | string
  }

  export type ViagemWhereInput = {
    AND?: ViagemWhereInput | ViagemWhereInput[]
    OR?: ViagemWhereInput[]
    NOT?: ViagemWhereInput | ViagemWhereInput[]
    id?: StringFilter<"Viagem"> | string
    motoristaId?: StringFilter<"Viagem"> | string
    camiao?: StringFilter<"Viagem"> | string
    origem?: StringFilter<"Viagem"> | string
    destino?: StringFilter<"Viagem"> | string
    distancia?: IntFilter<"Viagem"> | number
    dano?: IntNullableFilter<"Viagem"> | number | null
    velocidadeMax?: IntNullableFilter<"Viagem"> | number | null
    hora?: DateTimeFilter<"Viagem"> | Date | string
    data?: DateTimeFilter<"Viagem"> | Date | string
    game?: EnumGameFilter<"Viagem"> | $Enums.Game
    carga?: StringNullableFilter<"Viagem"> | string | null
    lucro?: StringNullableFilter<"Viagem"> | string | null
    motorista?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type ViagemOrderByWithRelationInput = {
    id?: SortOrder
    motoristaId?: SortOrder
    camiao?: SortOrder
    origem?: SortOrder
    destino?: SortOrder
    distancia?: SortOrder
    dano?: SortOrderInput | SortOrder
    velocidadeMax?: SortOrderInput | SortOrder
    hora?: SortOrder
    data?: SortOrder
    game?: SortOrder
    carga?: SortOrderInput | SortOrder
    lucro?: SortOrderInput | SortOrder
    motorista?: UserOrderByWithRelationInput
  }

  export type ViagemWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ViagemWhereInput | ViagemWhereInput[]
    OR?: ViagemWhereInput[]
    NOT?: ViagemWhereInput | ViagemWhereInput[]
    motoristaId?: StringFilter<"Viagem"> | string
    camiao?: StringFilter<"Viagem"> | string
    origem?: StringFilter<"Viagem"> | string
    destino?: StringFilter<"Viagem"> | string
    distancia?: IntFilter<"Viagem"> | number
    dano?: IntNullableFilter<"Viagem"> | number | null
    velocidadeMax?: IntNullableFilter<"Viagem"> | number | null
    hora?: DateTimeFilter<"Viagem"> | Date | string
    data?: DateTimeFilter<"Viagem"> | Date | string
    game?: EnumGameFilter<"Viagem"> | $Enums.Game
    carga?: StringNullableFilter<"Viagem"> | string | null
    lucro?: StringNullableFilter<"Viagem"> | string | null
    motorista?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type ViagemOrderByWithAggregationInput = {
    id?: SortOrder
    motoristaId?: SortOrder
    camiao?: SortOrder
    origem?: SortOrder
    destino?: SortOrder
    distancia?: SortOrder
    dano?: SortOrderInput | SortOrder
    velocidadeMax?: SortOrderInput | SortOrder
    hora?: SortOrder
    data?: SortOrder
    game?: SortOrder
    carga?: SortOrderInput | SortOrder
    lucro?: SortOrderInput | SortOrder
    _count?: ViagemCountOrderByAggregateInput
    _avg?: ViagemAvgOrderByAggregateInput
    _max?: ViagemMaxOrderByAggregateInput
    _min?: ViagemMinOrderByAggregateInput
    _sum?: ViagemSumOrderByAggregateInput
  }

  export type ViagemScalarWhereWithAggregatesInput = {
    AND?: ViagemScalarWhereWithAggregatesInput | ViagemScalarWhereWithAggregatesInput[]
    OR?: ViagemScalarWhereWithAggregatesInput[]
    NOT?: ViagemScalarWhereWithAggregatesInput | ViagemScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Viagem"> | string
    motoristaId?: StringWithAggregatesFilter<"Viagem"> | string
    camiao?: StringWithAggregatesFilter<"Viagem"> | string
    origem?: StringWithAggregatesFilter<"Viagem"> | string
    destino?: StringWithAggregatesFilter<"Viagem"> | string
    distancia?: IntWithAggregatesFilter<"Viagem"> | number
    dano?: IntNullableWithAggregatesFilter<"Viagem"> | number | null
    velocidadeMax?: IntNullableWithAggregatesFilter<"Viagem"> | number | null
    hora?: DateTimeWithAggregatesFilter<"Viagem"> | Date | string
    data?: DateTimeWithAggregatesFilter<"Viagem"> | Date | string
    game?: EnumGameWithAggregatesFilter<"Viagem"> | $Enums.Game
    carga?: StringNullableWithAggregatesFilter<"Viagem"> | string | null
    lucro?: StringNullableWithAggregatesFilter<"Viagem"> | string | null
  }

  export type ResetTokenWhereInput = {
    AND?: ResetTokenWhereInput | ResetTokenWhereInput[]
    OR?: ResetTokenWhereInput[]
    NOT?: ResetTokenWhereInput | ResetTokenWhereInput[]
    token?: StringFilter<"ResetToken"> | string
    userId?: StringFilter<"ResetToken"> | string
    expires?: DateTimeFilter<"ResetToken"> | Date | string
    createdAt?: DateTimeFilter<"ResetToken"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type ResetTokenOrderByWithRelationInput = {
    token?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type ResetTokenWhereUniqueInput = Prisma.AtLeast<{
    token?: string
    userId?: string
    AND?: ResetTokenWhereInput | ResetTokenWhereInput[]
    OR?: ResetTokenWhereInput[]
    NOT?: ResetTokenWhereInput | ResetTokenWhereInput[]
    expires?: DateTimeFilter<"ResetToken"> | Date | string
    createdAt?: DateTimeFilter<"ResetToken"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "token" | "userId">

  export type ResetTokenOrderByWithAggregationInput = {
    token?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    createdAt?: SortOrder
    _count?: ResetTokenCountOrderByAggregateInput
    _max?: ResetTokenMaxOrderByAggregateInput
    _min?: ResetTokenMinOrderByAggregateInput
  }

  export type ResetTokenScalarWhereWithAggregatesInput = {
    AND?: ResetTokenScalarWhereWithAggregatesInput | ResetTokenScalarWhereWithAggregatesInput[]
    OR?: ResetTokenScalarWhereWithAggregatesInput[]
    NOT?: ResetTokenScalarWhereWithAggregatesInput | ResetTokenScalarWhereWithAggregatesInput[]
    token?: StringWithAggregatesFilter<"ResetToken"> | string
    userId?: StringWithAggregatesFilter<"ResetToken"> | string
    expires?: DateTimeWithAggregatesFilter<"ResetToken"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"ResetToken"> | Date | string
  }

  export type TacaWhereInput = {
    AND?: TacaWhereInput | TacaWhereInput[]
    OR?: TacaWhereInput[]
    NOT?: TacaWhereInput | TacaWhereInput[]
    id?: StringFilter<"Taca"> | string
    userId?: StringFilter<"Taca"> | string
    nome?: StringFilter<"Taca"> | string
    ano?: IntFilter<"Taca"> | number
    jogo?: EnumGameFilter<"Taca"> | $Enums.Game
    createdAt?: DateTimeFilter<"Taca"> | Date | string
    titulo?: StringFilter<"Taca"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type TacaOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    nome?: SortOrder
    ano?: SortOrder
    jogo?: SortOrder
    createdAt?: SortOrder
    titulo?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type TacaWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TacaWhereInput | TacaWhereInput[]
    OR?: TacaWhereInput[]
    NOT?: TacaWhereInput | TacaWhereInput[]
    userId?: StringFilter<"Taca"> | string
    nome?: StringFilter<"Taca"> | string
    ano?: IntFilter<"Taca"> | number
    jogo?: EnumGameFilter<"Taca"> | $Enums.Game
    createdAt?: DateTimeFilter<"Taca"> | Date | string
    titulo?: StringFilter<"Taca"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type TacaOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    nome?: SortOrder
    ano?: SortOrder
    jogo?: SortOrder
    createdAt?: SortOrder
    titulo?: SortOrder
    _count?: TacaCountOrderByAggregateInput
    _avg?: TacaAvgOrderByAggregateInput
    _max?: TacaMaxOrderByAggregateInput
    _min?: TacaMinOrderByAggregateInput
    _sum?: TacaSumOrderByAggregateInput
  }

  export type TacaScalarWhereWithAggregatesInput = {
    AND?: TacaScalarWhereWithAggregatesInput | TacaScalarWhereWithAggregatesInput[]
    OR?: TacaScalarWhereWithAggregatesInput[]
    NOT?: TacaScalarWhereWithAggregatesInput | TacaScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Taca"> | string
    userId?: StringWithAggregatesFilter<"Taca"> | string
    nome?: StringWithAggregatesFilter<"Taca"> | string
    ano?: IntWithAggregatesFilter<"Taca"> | number
    jogo?: EnumGameWithAggregatesFilter<"Taca"> | $Enums.Game
    createdAt?: DateTimeWithAggregatesFilter<"Taca"> | Date | string
    titulo?: StringWithAggregatesFilter<"Taca"> | string
  }

  export type MedalhaWhereInput = {
    AND?: MedalhaWhereInput | MedalhaWhereInput[]
    OR?: MedalhaWhereInput[]
    NOT?: MedalhaWhereInput | MedalhaWhereInput[]
    id?: StringFilter<"Medalha"> | string
    userId?: StringFilter<"Medalha"> | string
    tipo?: StringFilter<"Medalha"> | string
    ano?: IntFilter<"Medalha"> | number
    jogo?: EnumGameFilter<"Medalha"> | $Enums.Game
    mes?: IntFilter<"Medalha"> | number
    titulo?: StringFilter<"Medalha"> | string
    createdAt?: DateTimeFilter<"Medalha"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type MedalhaOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    tipo?: SortOrder
    ano?: SortOrder
    jogo?: SortOrder
    mes?: SortOrder
    titulo?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type MedalhaWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MedalhaWhereInput | MedalhaWhereInput[]
    OR?: MedalhaWhereInput[]
    NOT?: MedalhaWhereInput | MedalhaWhereInput[]
    userId?: StringFilter<"Medalha"> | string
    tipo?: StringFilter<"Medalha"> | string
    ano?: IntFilter<"Medalha"> | number
    jogo?: EnumGameFilter<"Medalha"> | $Enums.Game
    mes?: IntFilter<"Medalha"> | number
    titulo?: StringFilter<"Medalha"> | string
    createdAt?: DateTimeFilter<"Medalha"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type MedalhaOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    tipo?: SortOrder
    ano?: SortOrder
    jogo?: SortOrder
    mes?: SortOrder
    titulo?: SortOrder
    createdAt?: SortOrder
    _count?: MedalhaCountOrderByAggregateInput
    _avg?: MedalhaAvgOrderByAggregateInput
    _max?: MedalhaMaxOrderByAggregateInput
    _min?: MedalhaMinOrderByAggregateInput
    _sum?: MedalhaSumOrderByAggregateInput
  }

  export type MedalhaScalarWhereWithAggregatesInput = {
    AND?: MedalhaScalarWhereWithAggregatesInput | MedalhaScalarWhereWithAggregatesInput[]
    OR?: MedalhaScalarWhereWithAggregatesInput[]
    NOT?: MedalhaScalarWhereWithAggregatesInput | MedalhaScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Medalha"> | string
    userId?: StringWithAggregatesFilter<"Medalha"> | string
    tipo?: StringWithAggregatesFilter<"Medalha"> | string
    ano?: IntWithAggregatesFilter<"Medalha"> | number
    jogo?: EnumGameWithAggregatesFilter<"Medalha"> | $Enums.Game
    mes?: IntWithAggregatesFilter<"Medalha"> | number
    titulo?: StringWithAggregatesFilter<"Medalha"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Medalha"> | Date | string
  }

  export type TrofeuWhereInput = {
    AND?: TrofeuWhereInput | TrofeuWhereInput[]
    OR?: TrofeuWhereInput[]
    NOT?: TrofeuWhereInput | TrofeuWhereInput[]
    id?: StringFilter<"Trofeu"> | string
    userId?: StringFilter<"Trofeu"> | string
    nome?: StringFilter<"Trofeu"> | string
    descricao?: StringFilter<"Trofeu"> | string
    tipo?: StringFilter<"Trofeu"> | string
    titulo?: StringFilter<"Trofeu"> | string
    imagem?: StringFilter<"Trofeu"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type TrofeuOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    nome?: SortOrder
    descricao?: SortOrder
    tipo?: SortOrder
    titulo?: SortOrder
    imagem?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type TrofeuWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TrofeuWhereInput | TrofeuWhereInput[]
    OR?: TrofeuWhereInput[]
    NOT?: TrofeuWhereInput | TrofeuWhereInput[]
    userId?: StringFilter<"Trofeu"> | string
    nome?: StringFilter<"Trofeu"> | string
    descricao?: StringFilter<"Trofeu"> | string
    tipo?: StringFilter<"Trofeu"> | string
    titulo?: StringFilter<"Trofeu"> | string
    imagem?: StringFilter<"Trofeu"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type TrofeuOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    nome?: SortOrder
    descricao?: SortOrder
    tipo?: SortOrder
    titulo?: SortOrder
    imagem?: SortOrder
    _count?: TrofeuCountOrderByAggregateInput
    _max?: TrofeuMaxOrderByAggregateInput
    _min?: TrofeuMinOrderByAggregateInput
  }

  export type TrofeuScalarWhereWithAggregatesInput = {
    AND?: TrofeuScalarWhereWithAggregatesInput | TrofeuScalarWhereWithAggregatesInput[]
    OR?: TrofeuScalarWhereWithAggregatesInput[]
    NOT?: TrofeuScalarWhereWithAggregatesInput | TrofeuScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Trofeu"> | string
    userId?: StringWithAggregatesFilter<"Trofeu"> | string
    nome?: StringWithAggregatesFilter<"Trofeu"> | string
    descricao?: StringWithAggregatesFilter<"Trofeu"> | string
    tipo?: StringWithAggregatesFilter<"Trofeu"> | string
    titulo?: StringWithAggregatesFilter<"Trofeu"> | string
    imagem?: StringWithAggregatesFilter<"Trofeu"> | string
  }

  export type UserCreateInput = {
    id?: string
    name: string
    email: string
    password: string
    role?: $Enums.Role
    isApproved?: boolean
    createdAt?: Date | string
    avatar?: string | null
    socials?: NullableJsonNullValueInput | InputJsonValue
    medalhas?: MedalhaCreateNestedManyWithoutUserInput
    resettokens?: ResetTokenCreateNestedOneWithoutUserInput
    sessions?: SessionCreateNestedOneWithoutUserInput
    tacas?: TacaCreateNestedManyWithoutUserInput
    trofeus?: TrofeuCreateNestedManyWithoutUserInput
    viagens?: ViagemCreateNestedManyWithoutMotoristaInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    name: string
    email: string
    password: string
    role?: $Enums.Role
    isApproved?: boolean
    createdAt?: Date | string
    avatar?: string | null
    socials?: NullableJsonNullValueInput | InputJsonValue
    medalhas?: MedalhaUncheckedCreateNestedManyWithoutUserInput
    resettokens?: ResetTokenUncheckedCreateNestedOneWithoutUserInput
    sessions?: SessionUncheckedCreateNestedOneWithoutUserInput
    tacas?: TacaUncheckedCreateNestedManyWithoutUserInput
    trofeus?: TrofeuUncheckedCreateNestedManyWithoutUserInput
    viagens?: ViagemUncheckedCreateNestedManyWithoutMotoristaInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    socials?: NullableJsonNullValueInput | InputJsonValue
    medalhas?: MedalhaUpdateManyWithoutUserNestedInput
    resettokens?: ResetTokenUpdateOneWithoutUserNestedInput
    sessions?: SessionUpdateOneWithoutUserNestedInput
    tacas?: TacaUpdateManyWithoutUserNestedInput
    trofeus?: TrofeuUpdateManyWithoutUserNestedInput
    viagens?: ViagemUpdateManyWithoutMotoristaNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    socials?: NullableJsonNullValueInput | InputJsonValue
    medalhas?: MedalhaUncheckedUpdateManyWithoutUserNestedInput
    resettokens?: ResetTokenUncheckedUpdateOneWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateOneWithoutUserNestedInput
    tacas?: TacaUncheckedUpdateManyWithoutUserNestedInput
    trofeus?: TrofeuUncheckedUpdateManyWithoutUserNestedInput
    viagens?: ViagemUncheckedUpdateManyWithoutMotoristaNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    name: string
    email: string
    password: string
    role?: $Enums.Role
    isApproved?: boolean
    createdAt?: Date | string
    avatar?: string | null
    socials?: NullableJsonNullValueInput | InputJsonValue
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    socials?: NullableJsonNullValueInput | InputJsonValue
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    socials?: NullableJsonNullValueInput | InputJsonValue
  }

  export type SessionCreateInput = {
    id?: string
    token: string
    expires: Date | string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutSessionsInput
  }

  export type SessionUncheckedCreateInput = {
    id?: string
    token: string
    userId: string
    expires: Date | string
    createdAt?: Date | string
  }

  export type SessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSessionsNestedInput
  }

  export type SessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionCreateManyInput = {
    id?: string
    token: string
    userId: string
    expires: Date | string
    createdAt?: Date | string
  }

  export type SessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ViagemCreateInput = {
    id?: string
    camiao: string
    origem: string
    destino: string
    distancia: number
    dano?: number | null
    velocidadeMax?: number | null
    hora?: Date | string
    data?: Date | string
    game: $Enums.Game
    carga?: string | null
    lucro?: string | null
    motorista: UserCreateNestedOneWithoutViagensInput
  }

  export type ViagemUncheckedCreateInput = {
    id?: string
    motoristaId: string
    camiao: string
    origem: string
    destino: string
    distancia: number
    dano?: number | null
    velocidadeMax?: number | null
    hora?: Date | string
    data?: Date | string
    game: $Enums.Game
    carga?: string | null
    lucro?: string | null
  }

  export type ViagemUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    camiao?: StringFieldUpdateOperationsInput | string
    origem?: StringFieldUpdateOperationsInput | string
    destino?: StringFieldUpdateOperationsInput | string
    distancia?: IntFieldUpdateOperationsInput | number
    dano?: NullableIntFieldUpdateOperationsInput | number | null
    velocidadeMax?: NullableIntFieldUpdateOperationsInput | number | null
    hora?: DateTimeFieldUpdateOperationsInput | Date | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    game?: EnumGameFieldUpdateOperationsInput | $Enums.Game
    carga?: NullableStringFieldUpdateOperationsInput | string | null
    lucro?: NullableStringFieldUpdateOperationsInput | string | null
    motorista?: UserUpdateOneRequiredWithoutViagensNestedInput
  }

  export type ViagemUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    motoristaId?: StringFieldUpdateOperationsInput | string
    camiao?: StringFieldUpdateOperationsInput | string
    origem?: StringFieldUpdateOperationsInput | string
    destino?: StringFieldUpdateOperationsInput | string
    distancia?: IntFieldUpdateOperationsInput | number
    dano?: NullableIntFieldUpdateOperationsInput | number | null
    velocidadeMax?: NullableIntFieldUpdateOperationsInput | number | null
    hora?: DateTimeFieldUpdateOperationsInput | Date | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    game?: EnumGameFieldUpdateOperationsInput | $Enums.Game
    carga?: NullableStringFieldUpdateOperationsInput | string | null
    lucro?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ViagemCreateManyInput = {
    id?: string
    motoristaId: string
    camiao: string
    origem: string
    destino: string
    distancia: number
    dano?: number | null
    velocidadeMax?: number | null
    hora?: Date | string
    data?: Date | string
    game: $Enums.Game
    carga?: string | null
    lucro?: string | null
  }

  export type ViagemUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    camiao?: StringFieldUpdateOperationsInput | string
    origem?: StringFieldUpdateOperationsInput | string
    destino?: StringFieldUpdateOperationsInput | string
    distancia?: IntFieldUpdateOperationsInput | number
    dano?: NullableIntFieldUpdateOperationsInput | number | null
    velocidadeMax?: NullableIntFieldUpdateOperationsInput | number | null
    hora?: DateTimeFieldUpdateOperationsInput | Date | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    game?: EnumGameFieldUpdateOperationsInput | $Enums.Game
    carga?: NullableStringFieldUpdateOperationsInput | string | null
    lucro?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ViagemUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    motoristaId?: StringFieldUpdateOperationsInput | string
    camiao?: StringFieldUpdateOperationsInput | string
    origem?: StringFieldUpdateOperationsInput | string
    destino?: StringFieldUpdateOperationsInput | string
    distancia?: IntFieldUpdateOperationsInput | number
    dano?: NullableIntFieldUpdateOperationsInput | number | null
    velocidadeMax?: NullableIntFieldUpdateOperationsInput | number | null
    hora?: DateTimeFieldUpdateOperationsInput | Date | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    game?: EnumGameFieldUpdateOperationsInput | $Enums.Game
    carga?: NullableStringFieldUpdateOperationsInput | string | null
    lucro?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ResetTokenCreateInput = {
    token: string
    expires: Date | string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutResettokensInput
  }

  export type ResetTokenUncheckedCreateInput = {
    token: string
    userId: string
    expires: Date | string
    createdAt?: Date | string
  }

  export type ResetTokenUpdateInput = {
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutResettokensNestedInput
  }

  export type ResetTokenUncheckedUpdateInput = {
    token?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResetTokenCreateManyInput = {
    token: string
    userId: string
    expires: Date | string
    createdAt?: Date | string
  }

  export type ResetTokenUpdateManyMutationInput = {
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResetTokenUncheckedUpdateManyInput = {
    token?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TacaCreateInput = {
    id?: string
    nome: string
    ano: number
    jogo: $Enums.Game
    createdAt?: Date | string
    titulo: string
    user: UserCreateNestedOneWithoutTacasInput
  }

  export type TacaUncheckedCreateInput = {
    id?: string
    userId: string
    nome: string
    ano: number
    jogo: $Enums.Game
    createdAt?: Date | string
    titulo: string
  }

  export type TacaUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    ano?: IntFieldUpdateOperationsInput | number
    jogo?: EnumGameFieldUpdateOperationsInput | $Enums.Game
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    titulo?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutTacasNestedInput
  }

  export type TacaUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    ano?: IntFieldUpdateOperationsInput | number
    jogo?: EnumGameFieldUpdateOperationsInput | $Enums.Game
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    titulo?: StringFieldUpdateOperationsInput | string
  }

  export type TacaCreateManyInput = {
    id?: string
    userId: string
    nome: string
    ano: number
    jogo: $Enums.Game
    createdAt?: Date | string
    titulo: string
  }

  export type TacaUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    ano?: IntFieldUpdateOperationsInput | number
    jogo?: EnumGameFieldUpdateOperationsInput | $Enums.Game
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    titulo?: StringFieldUpdateOperationsInput | string
  }

  export type TacaUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    ano?: IntFieldUpdateOperationsInput | number
    jogo?: EnumGameFieldUpdateOperationsInput | $Enums.Game
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    titulo?: StringFieldUpdateOperationsInput | string
  }

  export type MedalhaCreateInput = {
    id?: string
    tipo: string
    ano: number
    jogo: $Enums.Game
    mes: number
    titulo: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutMedalhasInput
  }

  export type MedalhaUncheckedCreateInput = {
    id?: string
    userId: string
    tipo: string
    ano: number
    jogo: $Enums.Game
    mes: number
    titulo: string
    createdAt?: Date | string
  }

  export type MedalhaUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    ano?: IntFieldUpdateOperationsInput | number
    jogo?: EnumGameFieldUpdateOperationsInput | $Enums.Game
    mes?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutMedalhasNestedInput
  }

  export type MedalhaUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    ano?: IntFieldUpdateOperationsInput | number
    jogo?: EnumGameFieldUpdateOperationsInput | $Enums.Game
    mes?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MedalhaCreateManyInput = {
    id?: string
    userId: string
    tipo: string
    ano: number
    jogo: $Enums.Game
    mes: number
    titulo: string
    createdAt?: Date | string
  }

  export type MedalhaUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    ano?: IntFieldUpdateOperationsInput | number
    jogo?: EnumGameFieldUpdateOperationsInput | $Enums.Game
    mes?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MedalhaUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    ano?: IntFieldUpdateOperationsInput | number
    jogo?: EnumGameFieldUpdateOperationsInput | $Enums.Game
    mes?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TrofeuCreateInput = {
    id?: string
    nome: string
    descricao: string
    tipo: string
    titulo: string
    imagem: string
    user: UserCreateNestedOneWithoutTrofeusInput
  }

  export type TrofeuUncheckedCreateInput = {
    id?: string
    userId: string
    nome: string
    descricao: string
    tipo: string
    titulo: string
    imagem: string
  }

  export type TrofeuUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    imagem?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutTrofeusNestedInput
  }

  export type TrofeuUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    imagem?: StringFieldUpdateOperationsInput | string
  }

  export type TrofeuCreateManyInput = {
    id?: string
    userId: string
    nome: string
    descricao: string
    tipo: string
    titulo: string
    imagem: string
  }

  export type TrofeuUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    imagem?: StringFieldUpdateOperationsInput | string
  }

  export type TrofeuUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    imagem?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }
  export type JsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type MedalhaListRelationFilter = {
    every?: MedalhaWhereInput
    some?: MedalhaWhereInput
    none?: MedalhaWhereInput
  }

  export type ResetTokenNullableScalarRelationFilter = {
    is?: ResetTokenWhereInput | null
    isNot?: ResetTokenWhereInput | null
  }

  export type SessionNullableScalarRelationFilter = {
    is?: SessionWhereInput | null
    isNot?: SessionWhereInput | null
  }

  export type TacaListRelationFilter = {
    every?: TacaWhereInput
    some?: TacaWhereInput
    none?: TacaWhereInput
  }

  export type TrofeuListRelationFilter = {
    every?: TrofeuWhereInput
    some?: TrofeuWhereInput
    none?: TrofeuWhereInput
  }

  export type ViagemListRelationFilter = {
    every?: ViagemWhereInput
    some?: ViagemWhereInput
    none?: ViagemWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type MedalhaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TacaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TrofeuOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ViagemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    isApproved?: SortOrder
    createdAt?: SortOrder
    avatar?: SortOrder
    socials?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    isApproved?: SortOrder
    createdAt?: SortOrder
    avatar?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    isApproved?: SortOrder
    createdAt?: SortOrder
    avatar?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type SessionCountOrderByAggregateInput = {
    id?: SortOrder
    token?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    createdAt?: SortOrder
  }

  export type SessionMaxOrderByAggregateInput = {
    id?: SortOrder
    token?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    createdAt?: SortOrder
  }

  export type SessionMinOrderByAggregateInput = {
    id?: SortOrder
    token?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    createdAt?: SortOrder
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type EnumGameFilter<$PrismaModel = never> = {
    equals?: $Enums.Game | EnumGameFieldRefInput<$PrismaModel>
    in?: $Enums.Game[] | ListEnumGameFieldRefInput<$PrismaModel>
    notIn?: $Enums.Game[] | ListEnumGameFieldRefInput<$PrismaModel>
    not?: NestedEnumGameFilter<$PrismaModel> | $Enums.Game
  }

  export type ViagemCountOrderByAggregateInput = {
    id?: SortOrder
    motoristaId?: SortOrder
    camiao?: SortOrder
    origem?: SortOrder
    destino?: SortOrder
    distancia?: SortOrder
    dano?: SortOrder
    velocidadeMax?: SortOrder
    hora?: SortOrder
    data?: SortOrder
    game?: SortOrder
    carga?: SortOrder
    lucro?: SortOrder
  }

  export type ViagemAvgOrderByAggregateInput = {
    distancia?: SortOrder
    dano?: SortOrder
    velocidadeMax?: SortOrder
  }

  export type ViagemMaxOrderByAggregateInput = {
    id?: SortOrder
    motoristaId?: SortOrder
    camiao?: SortOrder
    origem?: SortOrder
    destino?: SortOrder
    distancia?: SortOrder
    dano?: SortOrder
    velocidadeMax?: SortOrder
    hora?: SortOrder
    data?: SortOrder
    game?: SortOrder
    carga?: SortOrder
    lucro?: SortOrder
  }

  export type ViagemMinOrderByAggregateInput = {
    id?: SortOrder
    motoristaId?: SortOrder
    camiao?: SortOrder
    origem?: SortOrder
    destino?: SortOrder
    distancia?: SortOrder
    dano?: SortOrder
    velocidadeMax?: SortOrder
    hora?: SortOrder
    data?: SortOrder
    game?: SortOrder
    carga?: SortOrder
    lucro?: SortOrder
  }

  export type ViagemSumOrderByAggregateInput = {
    distancia?: SortOrder
    dano?: SortOrder
    velocidadeMax?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type EnumGameWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Game | EnumGameFieldRefInput<$PrismaModel>
    in?: $Enums.Game[] | ListEnumGameFieldRefInput<$PrismaModel>
    notIn?: $Enums.Game[] | ListEnumGameFieldRefInput<$PrismaModel>
    not?: NestedEnumGameWithAggregatesFilter<$PrismaModel> | $Enums.Game
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumGameFilter<$PrismaModel>
    _max?: NestedEnumGameFilter<$PrismaModel>
  }

  export type ResetTokenCountOrderByAggregateInput = {
    token?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    createdAt?: SortOrder
  }

  export type ResetTokenMaxOrderByAggregateInput = {
    token?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    createdAt?: SortOrder
  }

  export type ResetTokenMinOrderByAggregateInput = {
    token?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    createdAt?: SortOrder
  }

  export type TacaCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    nome?: SortOrder
    ano?: SortOrder
    jogo?: SortOrder
    createdAt?: SortOrder
    titulo?: SortOrder
  }

  export type TacaAvgOrderByAggregateInput = {
    ano?: SortOrder
  }

  export type TacaMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    nome?: SortOrder
    ano?: SortOrder
    jogo?: SortOrder
    createdAt?: SortOrder
    titulo?: SortOrder
  }

  export type TacaMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    nome?: SortOrder
    ano?: SortOrder
    jogo?: SortOrder
    createdAt?: SortOrder
    titulo?: SortOrder
  }

  export type TacaSumOrderByAggregateInput = {
    ano?: SortOrder
  }

  export type MedalhaCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    tipo?: SortOrder
    ano?: SortOrder
    jogo?: SortOrder
    mes?: SortOrder
    titulo?: SortOrder
    createdAt?: SortOrder
  }

  export type MedalhaAvgOrderByAggregateInput = {
    ano?: SortOrder
    mes?: SortOrder
  }

  export type MedalhaMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    tipo?: SortOrder
    ano?: SortOrder
    jogo?: SortOrder
    mes?: SortOrder
    titulo?: SortOrder
    createdAt?: SortOrder
  }

  export type MedalhaMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    tipo?: SortOrder
    ano?: SortOrder
    jogo?: SortOrder
    mes?: SortOrder
    titulo?: SortOrder
    createdAt?: SortOrder
  }

  export type MedalhaSumOrderByAggregateInput = {
    ano?: SortOrder
    mes?: SortOrder
  }

  export type TrofeuCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    nome?: SortOrder
    descricao?: SortOrder
    tipo?: SortOrder
    titulo?: SortOrder
    imagem?: SortOrder
  }

  export type TrofeuMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    nome?: SortOrder
    descricao?: SortOrder
    tipo?: SortOrder
    titulo?: SortOrder
    imagem?: SortOrder
  }

  export type TrofeuMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    nome?: SortOrder
    descricao?: SortOrder
    tipo?: SortOrder
    titulo?: SortOrder
    imagem?: SortOrder
  }

  export type MedalhaCreateNestedManyWithoutUserInput = {
    create?: XOR<MedalhaCreateWithoutUserInput, MedalhaUncheckedCreateWithoutUserInput> | MedalhaCreateWithoutUserInput[] | MedalhaUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MedalhaCreateOrConnectWithoutUserInput | MedalhaCreateOrConnectWithoutUserInput[]
    createMany?: MedalhaCreateManyUserInputEnvelope
    connect?: MedalhaWhereUniqueInput | MedalhaWhereUniqueInput[]
  }

  export type ResetTokenCreateNestedOneWithoutUserInput = {
    create?: XOR<ResetTokenCreateWithoutUserInput, ResetTokenUncheckedCreateWithoutUserInput>
    connectOrCreate?: ResetTokenCreateOrConnectWithoutUserInput
    connect?: ResetTokenWhereUniqueInput
  }

  export type SessionCreateNestedOneWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput
    connect?: SessionWhereUniqueInput
  }

  export type TacaCreateNestedManyWithoutUserInput = {
    create?: XOR<TacaCreateWithoutUserInput, TacaUncheckedCreateWithoutUserInput> | TacaCreateWithoutUserInput[] | TacaUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TacaCreateOrConnectWithoutUserInput | TacaCreateOrConnectWithoutUserInput[]
    createMany?: TacaCreateManyUserInputEnvelope
    connect?: TacaWhereUniqueInput | TacaWhereUniqueInput[]
  }

  export type TrofeuCreateNestedManyWithoutUserInput = {
    create?: XOR<TrofeuCreateWithoutUserInput, TrofeuUncheckedCreateWithoutUserInput> | TrofeuCreateWithoutUserInput[] | TrofeuUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TrofeuCreateOrConnectWithoutUserInput | TrofeuCreateOrConnectWithoutUserInput[]
    createMany?: TrofeuCreateManyUserInputEnvelope
    connect?: TrofeuWhereUniqueInput | TrofeuWhereUniqueInput[]
  }

  export type ViagemCreateNestedManyWithoutMotoristaInput = {
    create?: XOR<ViagemCreateWithoutMotoristaInput, ViagemUncheckedCreateWithoutMotoristaInput> | ViagemCreateWithoutMotoristaInput[] | ViagemUncheckedCreateWithoutMotoristaInput[]
    connectOrCreate?: ViagemCreateOrConnectWithoutMotoristaInput | ViagemCreateOrConnectWithoutMotoristaInput[]
    createMany?: ViagemCreateManyMotoristaInputEnvelope
    connect?: ViagemWhereUniqueInput | ViagemWhereUniqueInput[]
  }

  export type MedalhaUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<MedalhaCreateWithoutUserInput, MedalhaUncheckedCreateWithoutUserInput> | MedalhaCreateWithoutUserInput[] | MedalhaUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MedalhaCreateOrConnectWithoutUserInput | MedalhaCreateOrConnectWithoutUserInput[]
    createMany?: MedalhaCreateManyUserInputEnvelope
    connect?: MedalhaWhereUniqueInput | MedalhaWhereUniqueInput[]
  }

  export type ResetTokenUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<ResetTokenCreateWithoutUserInput, ResetTokenUncheckedCreateWithoutUserInput>
    connectOrCreate?: ResetTokenCreateOrConnectWithoutUserInput
    connect?: ResetTokenWhereUniqueInput
  }

  export type SessionUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput
    connect?: SessionWhereUniqueInput
  }

  export type TacaUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<TacaCreateWithoutUserInput, TacaUncheckedCreateWithoutUserInput> | TacaCreateWithoutUserInput[] | TacaUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TacaCreateOrConnectWithoutUserInput | TacaCreateOrConnectWithoutUserInput[]
    createMany?: TacaCreateManyUserInputEnvelope
    connect?: TacaWhereUniqueInput | TacaWhereUniqueInput[]
  }

  export type TrofeuUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<TrofeuCreateWithoutUserInput, TrofeuUncheckedCreateWithoutUserInput> | TrofeuCreateWithoutUserInput[] | TrofeuUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TrofeuCreateOrConnectWithoutUserInput | TrofeuCreateOrConnectWithoutUserInput[]
    createMany?: TrofeuCreateManyUserInputEnvelope
    connect?: TrofeuWhereUniqueInput | TrofeuWhereUniqueInput[]
  }

  export type ViagemUncheckedCreateNestedManyWithoutMotoristaInput = {
    create?: XOR<ViagemCreateWithoutMotoristaInput, ViagemUncheckedCreateWithoutMotoristaInput> | ViagemCreateWithoutMotoristaInput[] | ViagemUncheckedCreateWithoutMotoristaInput[]
    connectOrCreate?: ViagemCreateOrConnectWithoutMotoristaInput | ViagemCreateOrConnectWithoutMotoristaInput[]
    createMany?: ViagemCreateManyMotoristaInputEnvelope
    connect?: ViagemWhereUniqueInput | ViagemWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type MedalhaUpdateManyWithoutUserNestedInput = {
    create?: XOR<MedalhaCreateWithoutUserInput, MedalhaUncheckedCreateWithoutUserInput> | MedalhaCreateWithoutUserInput[] | MedalhaUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MedalhaCreateOrConnectWithoutUserInput | MedalhaCreateOrConnectWithoutUserInput[]
    upsert?: MedalhaUpsertWithWhereUniqueWithoutUserInput | MedalhaUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MedalhaCreateManyUserInputEnvelope
    set?: MedalhaWhereUniqueInput | MedalhaWhereUniqueInput[]
    disconnect?: MedalhaWhereUniqueInput | MedalhaWhereUniqueInput[]
    delete?: MedalhaWhereUniqueInput | MedalhaWhereUniqueInput[]
    connect?: MedalhaWhereUniqueInput | MedalhaWhereUniqueInput[]
    update?: MedalhaUpdateWithWhereUniqueWithoutUserInput | MedalhaUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MedalhaUpdateManyWithWhereWithoutUserInput | MedalhaUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MedalhaScalarWhereInput | MedalhaScalarWhereInput[]
  }

  export type ResetTokenUpdateOneWithoutUserNestedInput = {
    create?: XOR<ResetTokenCreateWithoutUserInput, ResetTokenUncheckedCreateWithoutUserInput>
    connectOrCreate?: ResetTokenCreateOrConnectWithoutUserInput
    upsert?: ResetTokenUpsertWithoutUserInput
    disconnect?: ResetTokenWhereInput | boolean
    delete?: ResetTokenWhereInput | boolean
    connect?: ResetTokenWhereUniqueInput
    update?: XOR<XOR<ResetTokenUpdateToOneWithWhereWithoutUserInput, ResetTokenUpdateWithoutUserInput>, ResetTokenUncheckedUpdateWithoutUserInput>
  }

  export type SessionUpdateOneWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput
    upsert?: SessionUpsertWithoutUserInput
    disconnect?: SessionWhereInput | boolean
    delete?: SessionWhereInput | boolean
    connect?: SessionWhereUniqueInput
    update?: XOR<XOR<SessionUpdateToOneWithWhereWithoutUserInput, SessionUpdateWithoutUserInput>, SessionUncheckedUpdateWithoutUserInput>
  }

  export type TacaUpdateManyWithoutUserNestedInput = {
    create?: XOR<TacaCreateWithoutUserInput, TacaUncheckedCreateWithoutUserInput> | TacaCreateWithoutUserInput[] | TacaUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TacaCreateOrConnectWithoutUserInput | TacaCreateOrConnectWithoutUserInput[]
    upsert?: TacaUpsertWithWhereUniqueWithoutUserInput | TacaUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TacaCreateManyUserInputEnvelope
    set?: TacaWhereUniqueInput | TacaWhereUniqueInput[]
    disconnect?: TacaWhereUniqueInput | TacaWhereUniqueInput[]
    delete?: TacaWhereUniqueInput | TacaWhereUniqueInput[]
    connect?: TacaWhereUniqueInput | TacaWhereUniqueInput[]
    update?: TacaUpdateWithWhereUniqueWithoutUserInput | TacaUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TacaUpdateManyWithWhereWithoutUserInput | TacaUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TacaScalarWhereInput | TacaScalarWhereInput[]
  }

  export type TrofeuUpdateManyWithoutUserNestedInput = {
    create?: XOR<TrofeuCreateWithoutUserInput, TrofeuUncheckedCreateWithoutUserInput> | TrofeuCreateWithoutUserInput[] | TrofeuUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TrofeuCreateOrConnectWithoutUserInput | TrofeuCreateOrConnectWithoutUserInput[]
    upsert?: TrofeuUpsertWithWhereUniqueWithoutUserInput | TrofeuUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TrofeuCreateManyUserInputEnvelope
    set?: TrofeuWhereUniqueInput | TrofeuWhereUniqueInput[]
    disconnect?: TrofeuWhereUniqueInput | TrofeuWhereUniqueInput[]
    delete?: TrofeuWhereUniqueInput | TrofeuWhereUniqueInput[]
    connect?: TrofeuWhereUniqueInput | TrofeuWhereUniqueInput[]
    update?: TrofeuUpdateWithWhereUniqueWithoutUserInput | TrofeuUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TrofeuUpdateManyWithWhereWithoutUserInput | TrofeuUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TrofeuScalarWhereInput | TrofeuScalarWhereInput[]
  }

  export type ViagemUpdateManyWithoutMotoristaNestedInput = {
    create?: XOR<ViagemCreateWithoutMotoristaInput, ViagemUncheckedCreateWithoutMotoristaInput> | ViagemCreateWithoutMotoristaInput[] | ViagemUncheckedCreateWithoutMotoristaInput[]
    connectOrCreate?: ViagemCreateOrConnectWithoutMotoristaInput | ViagemCreateOrConnectWithoutMotoristaInput[]
    upsert?: ViagemUpsertWithWhereUniqueWithoutMotoristaInput | ViagemUpsertWithWhereUniqueWithoutMotoristaInput[]
    createMany?: ViagemCreateManyMotoristaInputEnvelope
    set?: ViagemWhereUniqueInput | ViagemWhereUniqueInput[]
    disconnect?: ViagemWhereUniqueInput | ViagemWhereUniqueInput[]
    delete?: ViagemWhereUniqueInput | ViagemWhereUniqueInput[]
    connect?: ViagemWhereUniqueInput | ViagemWhereUniqueInput[]
    update?: ViagemUpdateWithWhereUniqueWithoutMotoristaInput | ViagemUpdateWithWhereUniqueWithoutMotoristaInput[]
    updateMany?: ViagemUpdateManyWithWhereWithoutMotoristaInput | ViagemUpdateManyWithWhereWithoutMotoristaInput[]
    deleteMany?: ViagemScalarWhereInput | ViagemScalarWhereInput[]
  }

  export type MedalhaUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<MedalhaCreateWithoutUserInput, MedalhaUncheckedCreateWithoutUserInput> | MedalhaCreateWithoutUserInput[] | MedalhaUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MedalhaCreateOrConnectWithoutUserInput | MedalhaCreateOrConnectWithoutUserInput[]
    upsert?: MedalhaUpsertWithWhereUniqueWithoutUserInput | MedalhaUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MedalhaCreateManyUserInputEnvelope
    set?: MedalhaWhereUniqueInput | MedalhaWhereUniqueInput[]
    disconnect?: MedalhaWhereUniqueInput | MedalhaWhereUniqueInput[]
    delete?: MedalhaWhereUniqueInput | MedalhaWhereUniqueInput[]
    connect?: MedalhaWhereUniqueInput | MedalhaWhereUniqueInput[]
    update?: MedalhaUpdateWithWhereUniqueWithoutUserInput | MedalhaUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MedalhaUpdateManyWithWhereWithoutUserInput | MedalhaUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MedalhaScalarWhereInput | MedalhaScalarWhereInput[]
  }

  export type ResetTokenUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<ResetTokenCreateWithoutUserInput, ResetTokenUncheckedCreateWithoutUserInput>
    connectOrCreate?: ResetTokenCreateOrConnectWithoutUserInput
    upsert?: ResetTokenUpsertWithoutUserInput
    disconnect?: ResetTokenWhereInput | boolean
    delete?: ResetTokenWhereInput | boolean
    connect?: ResetTokenWhereUniqueInput
    update?: XOR<XOR<ResetTokenUpdateToOneWithWhereWithoutUserInput, ResetTokenUpdateWithoutUserInput>, ResetTokenUncheckedUpdateWithoutUserInput>
  }

  export type SessionUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput
    upsert?: SessionUpsertWithoutUserInput
    disconnect?: SessionWhereInput | boolean
    delete?: SessionWhereInput | boolean
    connect?: SessionWhereUniqueInput
    update?: XOR<XOR<SessionUpdateToOneWithWhereWithoutUserInput, SessionUpdateWithoutUserInput>, SessionUncheckedUpdateWithoutUserInput>
  }

  export type TacaUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<TacaCreateWithoutUserInput, TacaUncheckedCreateWithoutUserInput> | TacaCreateWithoutUserInput[] | TacaUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TacaCreateOrConnectWithoutUserInput | TacaCreateOrConnectWithoutUserInput[]
    upsert?: TacaUpsertWithWhereUniqueWithoutUserInput | TacaUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TacaCreateManyUserInputEnvelope
    set?: TacaWhereUniqueInput | TacaWhereUniqueInput[]
    disconnect?: TacaWhereUniqueInput | TacaWhereUniqueInput[]
    delete?: TacaWhereUniqueInput | TacaWhereUniqueInput[]
    connect?: TacaWhereUniqueInput | TacaWhereUniqueInput[]
    update?: TacaUpdateWithWhereUniqueWithoutUserInput | TacaUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TacaUpdateManyWithWhereWithoutUserInput | TacaUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TacaScalarWhereInput | TacaScalarWhereInput[]
  }

  export type TrofeuUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<TrofeuCreateWithoutUserInput, TrofeuUncheckedCreateWithoutUserInput> | TrofeuCreateWithoutUserInput[] | TrofeuUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TrofeuCreateOrConnectWithoutUserInput | TrofeuCreateOrConnectWithoutUserInput[]
    upsert?: TrofeuUpsertWithWhereUniqueWithoutUserInput | TrofeuUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TrofeuCreateManyUserInputEnvelope
    set?: TrofeuWhereUniqueInput | TrofeuWhereUniqueInput[]
    disconnect?: TrofeuWhereUniqueInput | TrofeuWhereUniqueInput[]
    delete?: TrofeuWhereUniqueInput | TrofeuWhereUniqueInput[]
    connect?: TrofeuWhereUniqueInput | TrofeuWhereUniqueInput[]
    update?: TrofeuUpdateWithWhereUniqueWithoutUserInput | TrofeuUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TrofeuUpdateManyWithWhereWithoutUserInput | TrofeuUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TrofeuScalarWhereInput | TrofeuScalarWhereInput[]
  }

  export type ViagemUncheckedUpdateManyWithoutMotoristaNestedInput = {
    create?: XOR<ViagemCreateWithoutMotoristaInput, ViagemUncheckedCreateWithoutMotoristaInput> | ViagemCreateWithoutMotoristaInput[] | ViagemUncheckedCreateWithoutMotoristaInput[]
    connectOrCreate?: ViagemCreateOrConnectWithoutMotoristaInput | ViagemCreateOrConnectWithoutMotoristaInput[]
    upsert?: ViagemUpsertWithWhereUniqueWithoutMotoristaInput | ViagemUpsertWithWhereUniqueWithoutMotoristaInput[]
    createMany?: ViagemCreateManyMotoristaInputEnvelope
    set?: ViagemWhereUniqueInput | ViagemWhereUniqueInput[]
    disconnect?: ViagemWhereUniqueInput | ViagemWhereUniqueInput[]
    delete?: ViagemWhereUniqueInput | ViagemWhereUniqueInput[]
    connect?: ViagemWhereUniqueInput | ViagemWhereUniqueInput[]
    update?: ViagemUpdateWithWhereUniqueWithoutMotoristaInput | ViagemUpdateWithWhereUniqueWithoutMotoristaInput[]
    updateMany?: ViagemUpdateManyWithWhereWithoutMotoristaInput | ViagemUpdateManyWithWhereWithoutMotoristaInput[]
    deleteMany?: ViagemScalarWhereInput | ViagemScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutSessionsInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSessionsNestedInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    upsert?: UserUpsertWithoutSessionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSessionsInput, UserUpdateWithoutSessionsInput>, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserCreateNestedOneWithoutViagensInput = {
    create?: XOR<UserCreateWithoutViagensInput, UserUncheckedCreateWithoutViagensInput>
    connectOrCreate?: UserCreateOrConnectWithoutViagensInput
    connect?: UserWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EnumGameFieldUpdateOperationsInput = {
    set?: $Enums.Game
  }

  export type UserUpdateOneRequiredWithoutViagensNestedInput = {
    create?: XOR<UserCreateWithoutViagensInput, UserUncheckedCreateWithoutViagensInput>
    connectOrCreate?: UserCreateOrConnectWithoutViagensInput
    upsert?: UserUpsertWithoutViagensInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutViagensInput, UserUpdateWithoutViagensInput>, UserUncheckedUpdateWithoutViagensInput>
  }

  export type UserCreateNestedOneWithoutResettokensInput = {
    create?: XOR<UserCreateWithoutResettokensInput, UserUncheckedCreateWithoutResettokensInput>
    connectOrCreate?: UserCreateOrConnectWithoutResettokensInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutResettokensNestedInput = {
    create?: XOR<UserCreateWithoutResettokensInput, UserUncheckedCreateWithoutResettokensInput>
    connectOrCreate?: UserCreateOrConnectWithoutResettokensInput
    upsert?: UserUpsertWithoutResettokensInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutResettokensInput, UserUpdateWithoutResettokensInput>, UserUncheckedUpdateWithoutResettokensInput>
  }

  export type UserCreateNestedOneWithoutTacasInput = {
    create?: XOR<UserCreateWithoutTacasInput, UserUncheckedCreateWithoutTacasInput>
    connectOrCreate?: UserCreateOrConnectWithoutTacasInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutTacasNestedInput = {
    create?: XOR<UserCreateWithoutTacasInput, UserUncheckedCreateWithoutTacasInput>
    connectOrCreate?: UserCreateOrConnectWithoutTacasInput
    upsert?: UserUpsertWithoutTacasInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTacasInput, UserUpdateWithoutTacasInput>, UserUncheckedUpdateWithoutTacasInput>
  }

  export type UserCreateNestedOneWithoutMedalhasInput = {
    create?: XOR<UserCreateWithoutMedalhasInput, UserUncheckedCreateWithoutMedalhasInput>
    connectOrCreate?: UserCreateOrConnectWithoutMedalhasInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutMedalhasNestedInput = {
    create?: XOR<UserCreateWithoutMedalhasInput, UserUncheckedCreateWithoutMedalhasInput>
    connectOrCreate?: UserCreateOrConnectWithoutMedalhasInput
    upsert?: UserUpsertWithoutMedalhasInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMedalhasInput, UserUpdateWithoutMedalhasInput>, UserUncheckedUpdateWithoutMedalhasInput>
  }

  export type UserCreateNestedOneWithoutTrofeusInput = {
    create?: XOR<UserCreateWithoutTrofeusInput, UserUncheckedCreateWithoutTrofeusInput>
    connectOrCreate?: UserCreateOrConnectWithoutTrofeusInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutTrofeusNestedInput = {
    create?: XOR<UserCreateWithoutTrofeusInput, UserUncheckedCreateWithoutTrofeusInput>
    connectOrCreate?: UserCreateOrConnectWithoutTrofeusInput
    upsert?: UserUpsertWithoutTrofeusInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTrofeusInput, UserUpdateWithoutTrofeusInput>, UserUncheckedUpdateWithoutTrofeusInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedEnumGameFilter<$PrismaModel = never> = {
    equals?: $Enums.Game | EnumGameFieldRefInput<$PrismaModel>
    in?: $Enums.Game[] | ListEnumGameFieldRefInput<$PrismaModel>
    notIn?: $Enums.Game[] | ListEnumGameFieldRefInput<$PrismaModel>
    not?: NestedEnumGameFilter<$PrismaModel> | $Enums.Game
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumGameWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Game | EnumGameFieldRefInput<$PrismaModel>
    in?: $Enums.Game[] | ListEnumGameFieldRefInput<$PrismaModel>
    notIn?: $Enums.Game[] | ListEnumGameFieldRefInput<$PrismaModel>
    not?: NestedEnumGameWithAggregatesFilter<$PrismaModel> | $Enums.Game
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumGameFilter<$PrismaModel>
    _max?: NestedEnumGameFilter<$PrismaModel>
  }

  export type MedalhaCreateWithoutUserInput = {
    id?: string
    tipo: string
    ano: number
    jogo: $Enums.Game
    mes: number
    titulo: string
    createdAt?: Date | string
  }

  export type MedalhaUncheckedCreateWithoutUserInput = {
    id?: string
    tipo: string
    ano: number
    jogo: $Enums.Game
    mes: number
    titulo: string
    createdAt?: Date | string
  }

  export type MedalhaCreateOrConnectWithoutUserInput = {
    where: MedalhaWhereUniqueInput
    create: XOR<MedalhaCreateWithoutUserInput, MedalhaUncheckedCreateWithoutUserInput>
  }

  export type MedalhaCreateManyUserInputEnvelope = {
    data: MedalhaCreateManyUserInput | MedalhaCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ResetTokenCreateWithoutUserInput = {
    token: string
    expires: Date | string
    createdAt?: Date | string
  }

  export type ResetTokenUncheckedCreateWithoutUserInput = {
    token: string
    expires: Date | string
    createdAt?: Date | string
  }

  export type ResetTokenCreateOrConnectWithoutUserInput = {
    where: ResetTokenWhereUniqueInput
    create: XOR<ResetTokenCreateWithoutUserInput, ResetTokenUncheckedCreateWithoutUserInput>
  }

  export type SessionCreateWithoutUserInput = {
    id?: string
    token: string
    expires: Date | string
    createdAt?: Date | string
  }

  export type SessionUncheckedCreateWithoutUserInput = {
    id?: string
    token: string
    expires: Date | string
    createdAt?: Date | string
  }

  export type SessionCreateOrConnectWithoutUserInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type TacaCreateWithoutUserInput = {
    id?: string
    nome: string
    ano: number
    jogo: $Enums.Game
    createdAt?: Date | string
    titulo: string
  }

  export type TacaUncheckedCreateWithoutUserInput = {
    id?: string
    nome: string
    ano: number
    jogo: $Enums.Game
    createdAt?: Date | string
    titulo: string
  }

  export type TacaCreateOrConnectWithoutUserInput = {
    where: TacaWhereUniqueInput
    create: XOR<TacaCreateWithoutUserInput, TacaUncheckedCreateWithoutUserInput>
  }

  export type TacaCreateManyUserInputEnvelope = {
    data: TacaCreateManyUserInput | TacaCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type TrofeuCreateWithoutUserInput = {
    id?: string
    nome: string
    descricao: string
    tipo: string
    titulo: string
    imagem: string
  }

  export type TrofeuUncheckedCreateWithoutUserInput = {
    id?: string
    nome: string
    descricao: string
    tipo: string
    titulo: string
    imagem: string
  }

  export type TrofeuCreateOrConnectWithoutUserInput = {
    where: TrofeuWhereUniqueInput
    create: XOR<TrofeuCreateWithoutUserInput, TrofeuUncheckedCreateWithoutUserInput>
  }

  export type TrofeuCreateManyUserInputEnvelope = {
    data: TrofeuCreateManyUserInput | TrofeuCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ViagemCreateWithoutMotoristaInput = {
    id?: string
    camiao: string
    origem: string
    destino: string
    distancia: number
    dano?: number | null
    velocidadeMax?: number | null
    hora?: Date | string
    data?: Date | string
    game: $Enums.Game
    carga?: string | null
    lucro?: string | null
  }

  export type ViagemUncheckedCreateWithoutMotoristaInput = {
    id?: string
    camiao: string
    origem: string
    destino: string
    distancia: number
    dano?: number | null
    velocidadeMax?: number | null
    hora?: Date | string
    data?: Date | string
    game: $Enums.Game
    carga?: string | null
    lucro?: string | null
  }

  export type ViagemCreateOrConnectWithoutMotoristaInput = {
    where: ViagemWhereUniqueInput
    create: XOR<ViagemCreateWithoutMotoristaInput, ViagemUncheckedCreateWithoutMotoristaInput>
  }

  export type ViagemCreateManyMotoristaInputEnvelope = {
    data: ViagemCreateManyMotoristaInput | ViagemCreateManyMotoristaInput[]
    skipDuplicates?: boolean
  }

  export type MedalhaUpsertWithWhereUniqueWithoutUserInput = {
    where: MedalhaWhereUniqueInput
    update: XOR<MedalhaUpdateWithoutUserInput, MedalhaUncheckedUpdateWithoutUserInput>
    create: XOR<MedalhaCreateWithoutUserInput, MedalhaUncheckedCreateWithoutUserInput>
  }

  export type MedalhaUpdateWithWhereUniqueWithoutUserInput = {
    where: MedalhaWhereUniqueInput
    data: XOR<MedalhaUpdateWithoutUserInput, MedalhaUncheckedUpdateWithoutUserInput>
  }

  export type MedalhaUpdateManyWithWhereWithoutUserInput = {
    where: MedalhaScalarWhereInput
    data: XOR<MedalhaUpdateManyMutationInput, MedalhaUncheckedUpdateManyWithoutUserInput>
  }

  export type MedalhaScalarWhereInput = {
    AND?: MedalhaScalarWhereInput | MedalhaScalarWhereInput[]
    OR?: MedalhaScalarWhereInput[]
    NOT?: MedalhaScalarWhereInput | MedalhaScalarWhereInput[]
    id?: StringFilter<"Medalha"> | string
    userId?: StringFilter<"Medalha"> | string
    tipo?: StringFilter<"Medalha"> | string
    ano?: IntFilter<"Medalha"> | number
    jogo?: EnumGameFilter<"Medalha"> | $Enums.Game
    mes?: IntFilter<"Medalha"> | number
    titulo?: StringFilter<"Medalha"> | string
    createdAt?: DateTimeFilter<"Medalha"> | Date | string
  }

  export type ResetTokenUpsertWithoutUserInput = {
    update: XOR<ResetTokenUpdateWithoutUserInput, ResetTokenUncheckedUpdateWithoutUserInput>
    create: XOR<ResetTokenCreateWithoutUserInput, ResetTokenUncheckedCreateWithoutUserInput>
    where?: ResetTokenWhereInput
  }

  export type ResetTokenUpdateToOneWithWhereWithoutUserInput = {
    where?: ResetTokenWhereInput
    data: XOR<ResetTokenUpdateWithoutUserInput, ResetTokenUncheckedUpdateWithoutUserInput>
  }

  export type ResetTokenUpdateWithoutUserInput = {
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResetTokenUncheckedUpdateWithoutUserInput = {
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUpsertWithoutUserInput = {
    update: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
    where?: SessionWhereInput
  }

  export type SessionUpdateToOneWithWhereWithoutUserInput = {
    where?: SessionWhereInput
    data: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
  }

  export type SessionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TacaUpsertWithWhereUniqueWithoutUserInput = {
    where: TacaWhereUniqueInput
    update: XOR<TacaUpdateWithoutUserInput, TacaUncheckedUpdateWithoutUserInput>
    create: XOR<TacaCreateWithoutUserInput, TacaUncheckedCreateWithoutUserInput>
  }

  export type TacaUpdateWithWhereUniqueWithoutUserInput = {
    where: TacaWhereUniqueInput
    data: XOR<TacaUpdateWithoutUserInput, TacaUncheckedUpdateWithoutUserInput>
  }

  export type TacaUpdateManyWithWhereWithoutUserInput = {
    where: TacaScalarWhereInput
    data: XOR<TacaUpdateManyMutationInput, TacaUncheckedUpdateManyWithoutUserInput>
  }

  export type TacaScalarWhereInput = {
    AND?: TacaScalarWhereInput | TacaScalarWhereInput[]
    OR?: TacaScalarWhereInput[]
    NOT?: TacaScalarWhereInput | TacaScalarWhereInput[]
    id?: StringFilter<"Taca"> | string
    userId?: StringFilter<"Taca"> | string
    nome?: StringFilter<"Taca"> | string
    ano?: IntFilter<"Taca"> | number
    jogo?: EnumGameFilter<"Taca"> | $Enums.Game
    createdAt?: DateTimeFilter<"Taca"> | Date | string
    titulo?: StringFilter<"Taca"> | string
  }

  export type TrofeuUpsertWithWhereUniqueWithoutUserInput = {
    where: TrofeuWhereUniqueInput
    update: XOR<TrofeuUpdateWithoutUserInput, TrofeuUncheckedUpdateWithoutUserInput>
    create: XOR<TrofeuCreateWithoutUserInput, TrofeuUncheckedCreateWithoutUserInput>
  }

  export type TrofeuUpdateWithWhereUniqueWithoutUserInput = {
    where: TrofeuWhereUniqueInput
    data: XOR<TrofeuUpdateWithoutUserInput, TrofeuUncheckedUpdateWithoutUserInput>
  }

  export type TrofeuUpdateManyWithWhereWithoutUserInput = {
    where: TrofeuScalarWhereInput
    data: XOR<TrofeuUpdateManyMutationInput, TrofeuUncheckedUpdateManyWithoutUserInput>
  }

  export type TrofeuScalarWhereInput = {
    AND?: TrofeuScalarWhereInput | TrofeuScalarWhereInput[]
    OR?: TrofeuScalarWhereInput[]
    NOT?: TrofeuScalarWhereInput | TrofeuScalarWhereInput[]
    id?: StringFilter<"Trofeu"> | string
    userId?: StringFilter<"Trofeu"> | string
    nome?: StringFilter<"Trofeu"> | string
    descricao?: StringFilter<"Trofeu"> | string
    tipo?: StringFilter<"Trofeu"> | string
    titulo?: StringFilter<"Trofeu"> | string
    imagem?: StringFilter<"Trofeu"> | string
  }

  export type ViagemUpsertWithWhereUniqueWithoutMotoristaInput = {
    where: ViagemWhereUniqueInput
    update: XOR<ViagemUpdateWithoutMotoristaInput, ViagemUncheckedUpdateWithoutMotoristaInput>
    create: XOR<ViagemCreateWithoutMotoristaInput, ViagemUncheckedCreateWithoutMotoristaInput>
  }

  export type ViagemUpdateWithWhereUniqueWithoutMotoristaInput = {
    where: ViagemWhereUniqueInput
    data: XOR<ViagemUpdateWithoutMotoristaInput, ViagemUncheckedUpdateWithoutMotoristaInput>
  }

  export type ViagemUpdateManyWithWhereWithoutMotoristaInput = {
    where: ViagemScalarWhereInput
    data: XOR<ViagemUpdateManyMutationInput, ViagemUncheckedUpdateManyWithoutMotoristaInput>
  }

  export type ViagemScalarWhereInput = {
    AND?: ViagemScalarWhereInput | ViagemScalarWhereInput[]
    OR?: ViagemScalarWhereInput[]
    NOT?: ViagemScalarWhereInput | ViagemScalarWhereInput[]
    id?: StringFilter<"Viagem"> | string
    motoristaId?: StringFilter<"Viagem"> | string
    camiao?: StringFilter<"Viagem"> | string
    origem?: StringFilter<"Viagem"> | string
    destino?: StringFilter<"Viagem"> | string
    distancia?: IntFilter<"Viagem"> | number
    dano?: IntNullableFilter<"Viagem"> | number | null
    velocidadeMax?: IntNullableFilter<"Viagem"> | number | null
    hora?: DateTimeFilter<"Viagem"> | Date | string
    data?: DateTimeFilter<"Viagem"> | Date | string
    game?: EnumGameFilter<"Viagem"> | $Enums.Game
    carga?: StringNullableFilter<"Viagem"> | string | null
    lucro?: StringNullableFilter<"Viagem"> | string | null
  }

  export type UserCreateWithoutSessionsInput = {
    id?: string
    name: string
    email: string
    password: string
    role?: $Enums.Role
    isApproved?: boolean
    createdAt?: Date | string
    avatar?: string | null
    socials?: NullableJsonNullValueInput | InputJsonValue
    medalhas?: MedalhaCreateNestedManyWithoutUserInput
    resettokens?: ResetTokenCreateNestedOneWithoutUserInput
    tacas?: TacaCreateNestedManyWithoutUserInput
    trofeus?: TrofeuCreateNestedManyWithoutUserInput
    viagens?: ViagemCreateNestedManyWithoutMotoristaInput
  }

  export type UserUncheckedCreateWithoutSessionsInput = {
    id?: string
    name: string
    email: string
    password: string
    role?: $Enums.Role
    isApproved?: boolean
    createdAt?: Date | string
    avatar?: string | null
    socials?: NullableJsonNullValueInput | InputJsonValue
    medalhas?: MedalhaUncheckedCreateNestedManyWithoutUserInput
    resettokens?: ResetTokenUncheckedCreateNestedOneWithoutUserInput
    tacas?: TacaUncheckedCreateNestedManyWithoutUserInput
    trofeus?: TrofeuUncheckedCreateNestedManyWithoutUserInput
    viagens?: ViagemUncheckedCreateNestedManyWithoutMotoristaInput
  }

  export type UserCreateOrConnectWithoutSessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
  }

  export type UserUpsertWithoutSessionsInput = {
    update: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSessionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    socials?: NullableJsonNullValueInput | InputJsonValue
    medalhas?: MedalhaUpdateManyWithoutUserNestedInput
    resettokens?: ResetTokenUpdateOneWithoutUserNestedInput
    tacas?: TacaUpdateManyWithoutUserNestedInput
    trofeus?: TrofeuUpdateManyWithoutUserNestedInput
    viagens?: ViagemUpdateManyWithoutMotoristaNestedInput
  }

  export type UserUncheckedUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    socials?: NullableJsonNullValueInput | InputJsonValue
    medalhas?: MedalhaUncheckedUpdateManyWithoutUserNestedInput
    resettokens?: ResetTokenUncheckedUpdateOneWithoutUserNestedInput
    tacas?: TacaUncheckedUpdateManyWithoutUserNestedInput
    trofeus?: TrofeuUncheckedUpdateManyWithoutUserNestedInput
    viagens?: ViagemUncheckedUpdateManyWithoutMotoristaNestedInput
  }

  export type UserCreateWithoutViagensInput = {
    id?: string
    name: string
    email: string
    password: string
    role?: $Enums.Role
    isApproved?: boolean
    createdAt?: Date | string
    avatar?: string | null
    socials?: NullableJsonNullValueInput | InputJsonValue
    medalhas?: MedalhaCreateNestedManyWithoutUserInput
    resettokens?: ResetTokenCreateNestedOneWithoutUserInput
    sessions?: SessionCreateNestedOneWithoutUserInput
    tacas?: TacaCreateNestedManyWithoutUserInput
    trofeus?: TrofeuCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutViagensInput = {
    id?: string
    name: string
    email: string
    password: string
    role?: $Enums.Role
    isApproved?: boolean
    createdAt?: Date | string
    avatar?: string | null
    socials?: NullableJsonNullValueInput | InputJsonValue
    medalhas?: MedalhaUncheckedCreateNestedManyWithoutUserInput
    resettokens?: ResetTokenUncheckedCreateNestedOneWithoutUserInput
    sessions?: SessionUncheckedCreateNestedOneWithoutUserInput
    tacas?: TacaUncheckedCreateNestedManyWithoutUserInput
    trofeus?: TrofeuUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutViagensInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutViagensInput, UserUncheckedCreateWithoutViagensInput>
  }

  export type UserUpsertWithoutViagensInput = {
    update: XOR<UserUpdateWithoutViagensInput, UserUncheckedUpdateWithoutViagensInput>
    create: XOR<UserCreateWithoutViagensInput, UserUncheckedCreateWithoutViagensInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutViagensInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutViagensInput, UserUncheckedUpdateWithoutViagensInput>
  }

  export type UserUpdateWithoutViagensInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    socials?: NullableJsonNullValueInput | InputJsonValue
    medalhas?: MedalhaUpdateManyWithoutUserNestedInput
    resettokens?: ResetTokenUpdateOneWithoutUserNestedInput
    sessions?: SessionUpdateOneWithoutUserNestedInput
    tacas?: TacaUpdateManyWithoutUserNestedInput
    trofeus?: TrofeuUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutViagensInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    socials?: NullableJsonNullValueInput | InputJsonValue
    medalhas?: MedalhaUncheckedUpdateManyWithoutUserNestedInput
    resettokens?: ResetTokenUncheckedUpdateOneWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateOneWithoutUserNestedInput
    tacas?: TacaUncheckedUpdateManyWithoutUserNestedInput
    trofeus?: TrofeuUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutResettokensInput = {
    id?: string
    name: string
    email: string
    password: string
    role?: $Enums.Role
    isApproved?: boolean
    createdAt?: Date | string
    avatar?: string | null
    socials?: NullableJsonNullValueInput | InputJsonValue
    medalhas?: MedalhaCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedOneWithoutUserInput
    tacas?: TacaCreateNestedManyWithoutUserInput
    trofeus?: TrofeuCreateNestedManyWithoutUserInput
    viagens?: ViagemCreateNestedManyWithoutMotoristaInput
  }

  export type UserUncheckedCreateWithoutResettokensInput = {
    id?: string
    name: string
    email: string
    password: string
    role?: $Enums.Role
    isApproved?: boolean
    createdAt?: Date | string
    avatar?: string | null
    socials?: NullableJsonNullValueInput | InputJsonValue
    medalhas?: MedalhaUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedOneWithoutUserInput
    tacas?: TacaUncheckedCreateNestedManyWithoutUserInput
    trofeus?: TrofeuUncheckedCreateNestedManyWithoutUserInput
    viagens?: ViagemUncheckedCreateNestedManyWithoutMotoristaInput
  }

  export type UserCreateOrConnectWithoutResettokensInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutResettokensInput, UserUncheckedCreateWithoutResettokensInput>
  }

  export type UserUpsertWithoutResettokensInput = {
    update: XOR<UserUpdateWithoutResettokensInput, UserUncheckedUpdateWithoutResettokensInput>
    create: XOR<UserCreateWithoutResettokensInput, UserUncheckedCreateWithoutResettokensInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutResettokensInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutResettokensInput, UserUncheckedUpdateWithoutResettokensInput>
  }

  export type UserUpdateWithoutResettokensInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    socials?: NullableJsonNullValueInput | InputJsonValue
    medalhas?: MedalhaUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateOneWithoutUserNestedInput
    tacas?: TacaUpdateManyWithoutUserNestedInput
    trofeus?: TrofeuUpdateManyWithoutUserNestedInput
    viagens?: ViagemUpdateManyWithoutMotoristaNestedInput
  }

  export type UserUncheckedUpdateWithoutResettokensInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    socials?: NullableJsonNullValueInput | InputJsonValue
    medalhas?: MedalhaUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateOneWithoutUserNestedInput
    tacas?: TacaUncheckedUpdateManyWithoutUserNestedInput
    trofeus?: TrofeuUncheckedUpdateManyWithoutUserNestedInput
    viagens?: ViagemUncheckedUpdateManyWithoutMotoristaNestedInput
  }

  export type UserCreateWithoutTacasInput = {
    id?: string
    name: string
    email: string
    password: string
    role?: $Enums.Role
    isApproved?: boolean
    createdAt?: Date | string
    avatar?: string | null
    socials?: NullableJsonNullValueInput | InputJsonValue
    medalhas?: MedalhaCreateNestedManyWithoutUserInput
    resettokens?: ResetTokenCreateNestedOneWithoutUserInput
    sessions?: SessionCreateNestedOneWithoutUserInput
    trofeus?: TrofeuCreateNestedManyWithoutUserInput
    viagens?: ViagemCreateNestedManyWithoutMotoristaInput
  }

  export type UserUncheckedCreateWithoutTacasInput = {
    id?: string
    name: string
    email: string
    password: string
    role?: $Enums.Role
    isApproved?: boolean
    createdAt?: Date | string
    avatar?: string | null
    socials?: NullableJsonNullValueInput | InputJsonValue
    medalhas?: MedalhaUncheckedCreateNestedManyWithoutUserInput
    resettokens?: ResetTokenUncheckedCreateNestedOneWithoutUserInput
    sessions?: SessionUncheckedCreateNestedOneWithoutUserInput
    trofeus?: TrofeuUncheckedCreateNestedManyWithoutUserInput
    viagens?: ViagemUncheckedCreateNestedManyWithoutMotoristaInput
  }

  export type UserCreateOrConnectWithoutTacasInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTacasInput, UserUncheckedCreateWithoutTacasInput>
  }

  export type UserUpsertWithoutTacasInput = {
    update: XOR<UserUpdateWithoutTacasInput, UserUncheckedUpdateWithoutTacasInput>
    create: XOR<UserCreateWithoutTacasInput, UserUncheckedCreateWithoutTacasInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTacasInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTacasInput, UserUncheckedUpdateWithoutTacasInput>
  }

  export type UserUpdateWithoutTacasInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    socials?: NullableJsonNullValueInput | InputJsonValue
    medalhas?: MedalhaUpdateManyWithoutUserNestedInput
    resettokens?: ResetTokenUpdateOneWithoutUserNestedInput
    sessions?: SessionUpdateOneWithoutUserNestedInput
    trofeus?: TrofeuUpdateManyWithoutUserNestedInput
    viagens?: ViagemUpdateManyWithoutMotoristaNestedInput
  }

  export type UserUncheckedUpdateWithoutTacasInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    socials?: NullableJsonNullValueInput | InputJsonValue
    medalhas?: MedalhaUncheckedUpdateManyWithoutUserNestedInput
    resettokens?: ResetTokenUncheckedUpdateOneWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateOneWithoutUserNestedInput
    trofeus?: TrofeuUncheckedUpdateManyWithoutUserNestedInput
    viagens?: ViagemUncheckedUpdateManyWithoutMotoristaNestedInput
  }

  export type UserCreateWithoutMedalhasInput = {
    id?: string
    name: string
    email: string
    password: string
    role?: $Enums.Role
    isApproved?: boolean
    createdAt?: Date | string
    avatar?: string | null
    socials?: NullableJsonNullValueInput | InputJsonValue
    resettokens?: ResetTokenCreateNestedOneWithoutUserInput
    sessions?: SessionCreateNestedOneWithoutUserInput
    tacas?: TacaCreateNestedManyWithoutUserInput
    trofeus?: TrofeuCreateNestedManyWithoutUserInput
    viagens?: ViagemCreateNestedManyWithoutMotoristaInput
  }

  export type UserUncheckedCreateWithoutMedalhasInput = {
    id?: string
    name: string
    email: string
    password: string
    role?: $Enums.Role
    isApproved?: boolean
    createdAt?: Date | string
    avatar?: string | null
    socials?: NullableJsonNullValueInput | InputJsonValue
    resettokens?: ResetTokenUncheckedCreateNestedOneWithoutUserInput
    sessions?: SessionUncheckedCreateNestedOneWithoutUserInput
    tacas?: TacaUncheckedCreateNestedManyWithoutUserInput
    trofeus?: TrofeuUncheckedCreateNestedManyWithoutUserInput
    viagens?: ViagemUncheckedCreateNestedManyWithoutMotoristaInput
  }

  export type UserCreateOrConnectWithoutMedalhasInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMedalhasInput, UserUncheckedCreateWithoutMedalhasInput>
  }

  export type UserUpsertWithoutMedalhasInput = {
    update: XOR<UserUpdateWithoutMedalhasInput, UserUncheckedUpdateWithoutMedalhasInput>
    create: XOR<UserCreateWithoutMedalhasInput, UserUncheckedCreateWithoutMedalhasInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMedalhasInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMedalhasInput, UserUncheckedUpdateWithoutMedalhasInput>
  }

  export type UserUpdateWithoutMedalhasInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    socials?: NullableJsonNullValueInput | InputJsonValue
    resettokens?: ResetTokenUpdateOneWithoutUserNestedInput
    sessions?: SessionUpdateOneWithoutUserNestedInput
    tacas?: TacaUpdateManyWithoutUserNestedInput
    trofeus?: TrofeuUpdateManyWithoutUserNestedInput
    viagens?: ViagemUpdateManyWithoutMotoristaNestedInput
  }

  export type UserUncheckedUpdateWithoutMedalhasInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    socials?: NullableJsonNullValueInput | InputJsonValue
    resettokens?: ResetTokenUncheckedUpdateOneWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateOneWithoutUserNestedInput
    tacas?: TacaUncheckedUpdateManyWithoutUserNestedInput
    trofeus?: TrofeuUncheckedUpdateManyWithoutUserNestedInput
    viagens?: ViagemUncheckedUpdateManyWithoutMotoristaNestedInput
  }

  export type UserCreateWithoutTrofeusInput = {
    id?: string
    name: string
    email: string
    password: string
    role?: $Enums.Role
    isApproved?: boolean
    createdAt?: Date | string
    avatar?: string | null
    socials?: NullableJsonNullValueInput | InputJsonValue
    medalhas?: MedalhaCreateNestedManyWithoutUserInput
    resettokens?: ResetTokenCreateNestedOneWithoutUserInput
    sessions?: SessionCreateNestedOneWithoutUserInput
    tacas?: TacaCreateNestedManyWithoutUserInput
    viagens?: ViagemCreateNestedManyWithoutMotoristaInput
  }

  export type UserUncheckedCreateWithoutTrofeusInput = {
    id?: string
    name: string
    email: string
    password: string
    role?: $Enums.Role
    isApproved?: boolean
    createdAt?: Date | string
    avatar?: string | null
    socials?: NullableJsonNullValueInput | InputJsonValue
    medalhas?: MedalhaUncheckedCreateNestedManyWithoutUserInput
    resettokens?: ResetTokenUncheckedCreateNestedOneWithoutUserInput
    sessions?: SessionUncheckedCreateNestedOneWithoutUserInput
    tacas?: TacaUncheckedCreateNestedManyWithoutUserInput
    viagens?: ViagemUncheckedCreateNestedManyWithoutMotoristaInput
  }

  export type UserCreateOrConnectWithoutTrofeusInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTrofeusInput, UserUncheckedCreateWithoutTrofeusInput>
  }

  export type UserUpsertWithoutTrofeusInput = {
    update: XOR<UserUpdateWithoutTrofeusInput, UserUncheckedUpdateWithoutTrofeusInput>
    create: XOR<UserCreateWithoutTrofeusInput, UserUncheckedCreateWithoutTrofeusInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTrofeusInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTrofeusInput, UserUncheckedUpdateWithoutTrofeusInput>
  }

  export type UserUpdateWithoutTrofeusInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    socials?: NullableJsonNullValueInput | InputJsonValue
    medalhas?: MedalhaUpdateManyWithoutUserNestedInput
    resettokens?: ResetTokenUpdateOneWithoutUserNestedInput
    sessions?: SessionUpdateOneWithoutUserNestedInput
    tacas?: TacaUpdateManyWithoutUserNestedInput
    viagens?: ViagemUpdateManyWithoutMotoristaNestedInput
  }

  export type UserUncheckedUpdateWithoutTrofeusInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    socials?: NullableJsonNullValueInput | InputJsonValue
    medalhas?: MedalhaUncheckedUpdateManyWithoutUserNestedInput
    resettokens?: ResetTokenUncheckedUpdateOneWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateOneWithoutUserNestedInput
    tacas?: TacaUncheckedUpdateManyWithoutUserNestedInput
    viagens?: ViagemUncheckedUpdateManyWithoutMotoristaNestedInput
  }

  export type MedalhaCreateManyUserInput = {
    id?: string
    tipo: string
    ano: number
    jogo: $Enums.Game
    mes: number
    titulo: string
    createdAt?: Date | string
  }

  export type TacaCreateManyUserInput = {
    id?: string
    nome: string
    ano: number
    jogo: $Enums.Game
    createdAt?: Date | string
    titulo: string
  }

  export type TrofeuCreateManyUserInput = {
    id?: string
    nome: string
    descricao: string
    tipo: string
    titulo: string
    imagem: string
  }

  export type ViagemCreateManyMotoristaInput = {
    id?: string
    camiao: string
    origem: string
    destino: string
    distancia: number
    dano?: number | null
    velocidadeMax?: number | null
    hora?: Date | string
    data?: Date | string
    game: $Enums.Game
    carga?: string | null
    lucro?: string | null
  }

  export type MedalhaUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    ano?: IntFieldUpdateOperationsInput | number
    jogo?: EnumGameFieldUpdateOperationsInput | $Enums.Game
    mes?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MedalhaUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    ano?: IntFieldUpdateOperationsInput | number
    jogo?: EnumGameFieldUpdateOperationsInput | $Enums.Game
    mes?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MedalhaUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    ano?: IntFieldUpdateOperationsInput | number
    jogo?: EnumGameFieldUpdateOperationsInput | $Enums.Game
    mes?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TacaUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    ano?: IntFieldUpdateOperationsInput | number
    jogo?: EnumGameFieldUpdateOperationsInput | $Enums.Game
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    titulo?: StringFieldUpdateOperationsInput | string
  }

  export type TacaUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    ano?: IntFieldUpdateOperationsInput | number
    jogo?: EnumGameFieldUpdateOperationsInput | $Enums.Game
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    titulo?: StringFieldUpdateOperationsInput | string
  }

  export type TacaUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    ano?: IntFieldUpdateOperationsInput | number
    jogo?: EnumGameFieldUpdateOperationsInput | $Enums.Game
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    titulo?: StringFieldUpdateOperationsInput | string
  }

  export type TrofeuUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    imagem?: StringFieldUpdateOperationsInput | string
  }

  export type TrofeuUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    imagem?: StringFieldUpdateOperationsInput | string
  }

  export type TrofeuUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    imagem?: StringFieldUpdateOperationsInput | string
  }

  export type ViagemUpdateWithoutMotoristaInput = {
    id?: StringFieldUpdateOperationsInput | string
    camiao?: StringFieldUpdateOperationsInput | string
    origem?: StringFieldUpdateOperationsInput | string
    destino?: StringFieldUpdateOperationsInput | string
    distancia?: IntFieldUpdateOperationsInput | number
    dano?: NullableIntFieldUpdateOperationsInput | number | null
    velocidadeMax?: NullableIntFieldUpdateOperationsInput | number | null
    hora?: DateTimeFieldUpdateOperationsInput | Date | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    game?: EnumGameFieldUpdateOperationsInput | $Enums.Game
    carga?: NullableStringFieldUpdateOperationsInput | string | null
    lucro?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ViagemUncheckedUpdateWithoutMotoristaInput = {
    id?: StringFieldUpdateOperationsInput | string
    camiao?: StringFieldUpdateOperationsInput | string
    origem?: StringFieldUpdateOperationsInput | string
    destino?: StringFieldUpdateOperationsInput | string
    distancia?: IntFieldUpdateOperationsInput | number
    dano?: NullableIntFieldUpdateOperationsInput | number | null
    velocidadeMax?: NullableIntFieldUpdateOperationsInput | number | null
    hora?: DateTimeFieldUpdateOperationsInput | Date | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    game?: EnumGameFieldUpdateOperationsInput | $Enums.Game
    carga?: NullableStringFieldUpdateOperationsInput | string | null
    lucro?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ViagemUncheckedUpdateManyWithoutMotoristaInput = {
    id?: StringFieldUpdateOperationsInput | string
    camiao?: StringFieldUpdateOperationsInput | string
    origem?: StringFieldUpdateOperationsInput | string
    destino?: StringFieldUpdateOperationsInput | string
    distancia?: IntFieldUpdateOperationsInput | number
    dano?: NullableIntFieldUpdateOperationsInput | number | null
    velocidadeMax?: NullableIntFieldUpdateOperationsInput | number | null
    hora?: DateTimeFieldUpdateOperationsInput | Date | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    game?: EnumGameFieldUpdateOperationsInput | $Enums.Game
    carga?: NullableStringFieldUpdateOperationsInput | string | null
    lucro?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}